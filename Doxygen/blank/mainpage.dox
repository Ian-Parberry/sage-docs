/**
\mainpage notitle

\anchor section1
# 1. Introduction
 
This is pretty much what it says, a blank 2D game with
a grassy hill in the background
and a rotating sprite of some amusing text (see \ref fig1 "Fig. 1").
Its purpose is to get you started quickly on the basics
of making a 2D game with SAGE (see \ref section3 "Section 3"). You can also
use it to start development of a new game. 

\anchor fig1
\image html screenshot.png "Fig. 1: A screenshot of the Blank 2D Game." width=30%

The remainder of this page is divided into five sections.
\ref section2 "Section 2" lists the keyboard controls
and their corresponding actions,
\ref section3 "Section 3" is a reminder to install SAGE, the Simple
Academic Game Engine,
\ref section4 "Section 4" describes the media used by the Blank Game,
including images, sounds, and fonts,
\ref section5 "Section 5" gives a breakdown of the code for the Blank Game,
and
\ref section6 "Section 6" addresses the question "what next?".

\anchor section2
# 2. Keyboard Controls

<center>
  <table>
    <tr>
      <td><center><b>Key</b></center></td>
      <td><center><b>Action</b></center></td>
    <tr>
      <td>F1</td>
      <td>Help (this document)</td>
    <tr>
      <td>F2</td>
      <td>Toggle frame rate display</td>
    <tr>
      <td>Space Down</td>
      <td>Play a clang sound</td>
    <tr>
      <td>Space Up</td>
      <td>Play a grunt sound</td>
    <tr>
      <td>Backspace</td>
      <td>Restart game</td>
    <tr>
      <td>PrtScr (hold down)</td>
      <td>Save screenshot to a PNG file</td>
    <tr>
      <td>Esc</td>
      <td>Quit game and exit</td>
  </table>
</center>

\anchor section3
# 3. SAGE

This code uses <a href="../sage/index.html">SAGE</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>.
Navigate to the folder `Blank 2D Game` in your copy of the `sage` repository.
Run `checkenv.bat` to verify that you have set the environment
variables correctly.
Run `Build.bat`. The Release executable file `Blank Game.exe`
will appear. When you run it you will see something similar to
\ref fig1 "Fig. 1" with the text wheel rotating about its center.
Experiment with the keyboard commands listed in \ref section2 "Section 2".

\anchor section4
# 4. Media

The media for this game, consisting of fonts, images, sounds, and XML files,
can be found in the folder `Media` in the solution folder.
These can be found in sub-folders `Fonts`, `Images`, `Sounds`, and
`XML`, respectively. You can change the names of the first three
folders provided you also make the changes indicated in \ref section4-4 "Section 4.4".

The remainder of this section is divided into four subsections
describing
fonts (\ref section4-1 "Section 4.1"), 
images (\ref section4-2 "Section 4.2"),
sounds (\ref section4-3 "Section 4.3"), and
XML files (\ref section4-4 "Section 4.4").

\anchor section4-1
## 4.1 Fonts

The `Fonts` folder contains a font in `spritefont` format, 
`AverageSans_24.spritefont`.
This font is licensed under the SIL Open Font License, Version 1.1, a copy of
which you will find in file `OFL.txt`.
It was converted to `spritefont` format using
[https://github.com/microsoft/DirectXTK12/wiki/SpriteFont](https://github.com/microsoft/DirectXTK12/wiki/SpriteFont), which you can find in your DirectXTK12 download (provided you followed the
instructions when you installed SAGE, see \ref section3 "Section 3").

\anchor section4-2
## 4.2 Images

The `Images` folder contains two image files in `PNG` format.
The background image `background.png` shown in \ref fig2 "Fig. 2", and the
text wheel shown in \ref fig3 "Fig. 3".
The file names can be changed
provided you also make the changes indicated in \ref section4-4 "Section 4.4".

\anchor fig2
\image html background.png "Fig. 2: The background image." width=30% 

\anchor fig3
\image html textwheel.png "Fig. 3: The text wheel sprite." width=20% 

\anchor section4-3
## 4.3 Sounds

The `Sounds` folder contains two sound files in `WAV` format.
The file `clang.wav` contains a clang sound, and
`umph.wav` contains a grunting sound.
The file names can be changed
provided you also make the changes indicated in \ref section4-4 "Section 4.4".
Note that the sound files must be in mono (single track) format,
otherwise bad things might happen.

\anchor section4-4
## 4.4 XML

The `XML` folder contains a single XML file called `GameSettings.xml` that contains settings.
The contents of the file are bracketed in `<settings>` and `</settings>` tags.

\code{.xml}
<settings>
</settings>
\endcode

The following tags can appear between these two tags in any order.
the game and renderer tag (\ref section4-4-1 "Section 4.4.1"), 
the font tag (\ref section4-4-2 "Section 4.4.2"), 
the sprite tags (\ref section4-4-3 "Section 4.4.3"), and
the sound tags (\ref section4-4-4 "Section 4.4.4"). 

\anchor section4-4-1
### 4.4.1 The Game and Renderer Tags

The tag `<game>` lets you specify the name of the game, which will be
displayed at the top of the game window.
The tag `<renderer>` lets you specify the width and height in pixels
of the user part of the game window.

\code{.xml}
  <game name="Blank 2D Game" />
  <renderer width="1024" height="768"/>
\endcode

\anchor section4-4-2
### 4.4.2 The Font Tag

The tag `<font>` lets you specify the name and location of the text font file.

\code{.xml}   
  <font file="Media\Fonts\AverageSans_24.spritefont"/>
\endcode

\anchor section4-4-3
### 4.4.3 The Sprite Tags

The `<sprites>` tag lets you specify the path to the images folder.
It is followed by a list of `<sprite>` tags, one for each sprite
in the game including the background image, and is closed by a `</sprites>` tag.
Each `<sprite>` tag has a `name` field and a `file` field.
The `name` field contains a string that will identify the sprite in the game's C++
code, and must be consistent with that code.
The `file` field contains the name of the image file and may be changed without
the need to recompile the game should you decide to rename the file.
The `name` field and the `file` field for any given sprite may be completely
different, should you feel the need to do so. The `<sprite>` tags may appear
in any order inside the `<sprites>` and `</sprites>` tags.

\code{.xml}
  <sprites path="Media\Images">
    <sprite name="background" file="background.png"/>
    <sprite name="textwheel" file="textwheel.png"/>
  </sprites>
\endcode

\anchor section4-4-4
### 4.4.4 The Sound Tags

The `<sounds>` tag lets you specify the path to the sound folder.
It is followed by a list of `<sound>` tags, one for each sound effect
in the game including the background image, and is closed by a `</sound>` tag.
Each `<sound>` tag has a `name` field, a `file` field, and an `instances` field.
The `name` field contains a string that will identify the sound in the game's C++
code, and must be consistent with that code.
The `file` field contains the name of the sound file and may be changed without
the need to recompile the game should you decide to rename the file.
The `name` field and the `file` field for any given sound may be completely
different, should you feel the need to do so. 
The `instances` field specifies how many instances of a sound can be played simultaneously.
The larger this number is, the more sound memory must be used.
It is typically between 1 and 8.
The `<sound>` tags may appear
in any order inside the `<sounds>` and `</sounds>` tags.

\code{.xml}
  <sounds path="Media\Sounds">
    <sound name="clang" file="clang.wav" instances="8"/>
    <sound name="grunt" file="umph.wav" instances="8"/>
  </sounds>
\endcode

\anchor section5
# 5. Code Breakdown

Open `Blank Game.sln` in Visual Studio and examine the
code in the editor while you read the
rest of this section, which is divided into two subsections.
\ref section5-1 "Section 5.1" breaks down the code
in `Main.cpp`. 
\ref section5-2 "Section 5.2" breaks down the code
for `CGame`, the object-oriented game code. 

\anchor section5-1
## 5.1 Main.cpp

`Main.cpp` should be identical in all SAGE games except for 
commenting in and out a single line of code to
activate the optional debug console (see \ref section5-1-1 "Section 5.1.1")
and memory leak detector (see \ref section5-1-2 "Section 5.1.2").
Function `wWinMain()` sets things up so that your implementation
of `CGame::Initialize()` is called at the correct time during
initialization, `CGame::ProcessFrame()` is called as often as possible
to compose and render a frame of animation, and 
`CGame::Release()` is called at the correct time during 
game shutdown. `CGame` will be discussed in more detail in
\ref section5-2 "Section 5.2".
The heavy lifting here is done by calling
<a href="../sage/class_sage_1_1_c_window.html#adfe2944a5e50b1df557bb0babbc5eb9c">
`Sage::WinMain`</a>
where you
can see the details of Windows code initialization including the message pump.
At this stage you can safely ignore these details, however.

\anchor section5-1-1
### 5.1.1 The Debug Console

SAGE includes an optional text debug window that can
be used in both `Debug` and `Release` modes.
If the line:

\code{.cpp}
//#define USE_DEBUG_CONSOLE
\endcode

in `Main.cpp` is uncommented as follows:

\code{.cpp}
#define USE_DEBUG_CONSOLE
\endcode

then a debug console window will appear at the same time as the
game window. All text output to `stdout` using, for example, 
`printf` or `iostream` will appear in this window. For example,
the line:

\code{.cpp}
printf("This is a test debug output\n");
\endcode

or the line:

\code{.cpp}
std::cout << "This is a test debug output" << std::endl;
\endcode

inserted into a function such as `CGame::LoadSprites()` will result in the
output shown in the debug console in \ref fig4 "Fig. 4". Your debug text will
be in red and directions will be in green text.

\anchor fig4
\image html debugconsole.png "Fig. 4: The debug console." width=50% 

The debug
console window will persist after you quit your game in order to
preserve debug output. Click on it to gain focus and
press, for example, the space key to close it down
as shown in \ref fig5 "Fig. 5"

\anchor fig5
\image html debugconsole2.png "Fig. 5: The debug console at exit." width=50% 

The `#define` for the debug console is commented out by default,
which means that the console window will not appear and all text
output will go to `/dev/null`.

\anchor section5-1-2
### 5.1.2 Visual Leak Detector

If you choose to not install Visual Leak Detector
(see \ref section4 "Section 4"),
then comment out the following line:

\code{.cpp}
#include <vld.h> 
\endcode

\anchor section5-2
## 5.2 CCommon

\anchor section5-3
## 5.3 CObject

\anchor section5-4
## 5.4 CGame

`CGame` is the object-oriented representation of your game.
Its declaration is in `Game.h` and its definition is in `Game.cpp`.
In addition, there are some useful defines and enumerated types
in `GameDefines.h`.

\anchor section5-4-1
### 5.4.1 CGame: Initialization

As mentioned in \ref section5-1 "Section 5.1",
`CGame::Initialize()` contains initialization code and will
be called once only when your game starts.
It creates a DirectXTK12 renderer (an instance of
<a href="../sage/class_sage_1_1_c_sprite_renderer.html">`Sage::CSpriteRenderer`</a>)
pointed to by `CGame::m_pRenderer`. The parameter
`Sage::eSpriteMode::Batched2D` to the sprite renderer directs it
to use batched mode sprite renderer from DirectXTK12.
It then calls `CGame::LoadSprites()` (see \ref section5-4-2 "Section 5.4.2")
to load the sprites needed for the
game, then calls `CGame::LoadSounds()` 
(see \ref section5-4-3 "Section 5.4.3")
to load the sounds.

\anchor section5-4-2
### 5.4.2 CGame: Loading Sprites 

`CGame::LoadSprites()` loads sprites for the background and the text wheel.
For convenience, the following enumerated type is declared in `GameDefines.h`.

\code{.cpp}
enum class eSprite{
  Background, TextWheel
}; //eSprite
\endcode

These will be used to refer to the sprites in the source code.
`CGame::LoadSprites()` first declares a
<a href="../sage/class_sage_1_1_c_media_list.html">`Sage::CMediaList`</a>
of type `eSprite`.

\code{.cpp}
  Sage::CMediaList<eSprite> media;
\endcode

It then inserts information about the two game sprites into this
media list.
 
\code{.cpp}
  media.Insert(eSprite::Background, "background"); 
  media.Insert(eSprite::TextWheel,  "textwheel"); 
\endcode

The first parameter is the `eSprite` entry for the sprite (its name
within the source code) and a string (its name in `GameSettings.xml`).
This string must be identical to the string in the `name` field of a `sprite`
tag in `GameSettings.xml` (see \ref section4-4-3 "Section 4.4.3").
It then calls 
<a href="../sage/class_sage_1_1_c_sound.html#a50299d4b69d084660b473d4e54c34ee8">`Sage::CSound::LoadMT()`</a>
to load the
sprites asynchronously in a separate thread. 
(Recall that `CGame` has a pointer to an instance of
<a href="../sage/class_sage_1_1_c_sprite_renderer.html">`Sage::CSpriteRenderer`</a>
in member variable `m_pRenderer`, see \ref section5-4-1 "Section 5.4.1").

\code{.cpp}
  m_pRenderer->LoadMT(media);
\endcode

`CGame::LoadSprites()`
will exit immediately and computation will proceed while the sprites load.
If you wish to load the sprites synchronously so that `CGame::LoadSprites()`
returns only after the sprites have been loaded (for example, during debugging),
use the following instead.

\code{.cpp}
  m_pRenderer->Load(media);
\endcode

\anchor section5-4-3
### 5.4.3 CGame: Loading Sounds

`CGame::LoadSounds()` loads sounds.
For convenience, the following enumerated type is declared in `GameDefines.h`.

\code{.cpp}
enum class eSound{
  Clang, Grunt
}; //eSound
\endcode

These will be used to refer to the sounds in the source code.
`CGame::LoadSounds()` first declares a
<a href="../sage/class_sage_1_1_c_media_list.html">`Sage::CMediaList`</a>
of type `eSound`.

\code{.cpp}
  Sage::CMediaList<eSound> media;
\endcode

It then inserts information about the two game sounds into this
media list.
 
\code{.cpp}
  media.Insert(eSound::Grunt, "grunt");
  media.Insert(eSound::Clang, "clang"); 
\endcode

The first parameter is the `eSound` entry for the sound (its name
within the source code) and a string (its name in `GameSettings.xml`).
This string must be identical to the string in the `name` field of a `sound`
tag in `GameSettings.xml` (see \ref section4-4-4 "Section 4.4.4").
It then calls 
<a href="../sage/class_sage_1_1_c_sound.html#a50299d4b69d084660b473d4e54c34ee8">`Sage::CSound::LoadMT()`</a>
to load the
sounds asynchronously in a separate thread. 
`CGame` inherits a pointer `m_pSound` to an instance of
<a href="../sage/class_sage_1_1_c_sound.html">`Sage::CSound`</a>
from
<a href="../sage/class_sage_1_1_c_component.html">`Sage::CComponent`</a>.

\code{.cpp}
  m_pSound->LoadMT(media);
\endcode

`CGame::LoadSounds()`
will exit immediately and computation will proceed while the sounds load.
If you wish to load the sounds synchronously so that `CGame::LoadSounds()`
returns only after the sounds have been loaded (for example, during debugging),
use the following instead.

\code{.cpp}
  m_pSound->Load(media);
\endcode

\anchor section5-4-4
### 5.4.4 CGame: The Frame Loop

As mentioned in \ref section5-1 "Section 5.1",
`CGame::ProcessFrame()` contains code that creates and displays
the next frame of animation. SAGE will ensure that this function
will be called repeatedly in a loop that terminates only when the game exits.

\anchor section5-4-4-1
#### 5.4.4.1 CGame: Frame Loop: The Game State

The behavior of `CGame::ProcessFrame()` will depend on the current
state of the game, which is recorded in `CGame::m_eGameState`,
which is of type `eGameState`, declared in `GameDefines.h` as:

\code{.cpp}
enum class eGameState{
  Loading, Playing
}; //eGameState
\endcode

`CGame::m_eGameState` is initially set to `eGameState::Loading` and
we will change it to `eGameState::Playing` when the (possibly asynchronous)
loading of sprites and sounds is finished.

\anchor section5-4-4-2
#### 5.4.4.2 CGame: Frame Loop: The Keyboard Handler

The first thing that `CGame::ProcessFrame()` does is call the keyboard
handler `CGame::KeyboardHandler()`. `CGame` inherits
from
<a href="../sage/class_sage_1_1_c_component.html">`Sage::CComponent`</a>
 a pointer `m_pKeyboard` to
an instance of 
<a href="../sage/class_sage_1_1_c_keyboard.html">`Sage::CKeyboard`</a>
which provides functions to poll
the current state of a key on the keyboard.
`CGame::KeyboardHandler()` first calls: 

\code{.cpp}
m_pKeyboard->GetState(); 
\endcode

Then, for example, a call to:

\code{.cpp}
  m_pKeyboard->TriggerDown(VK_F1) 
\endcode

will return `true` if the `F1` function key was up and went down
during the current frame. The keys are identified using
[virtual-key codes](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes).
An often-missed observation is that the virtual key code for alphanumerics is
the corresponding upper-case character, so for example, 
the virtual-key code for the letter A is not `VK_A`, it is 'A' and
can be used as follows:

\code{.cpp}
  m_pKeyboard->TriggerDown('A') 
\endcode

\anchor section5-4-4-3
#### 5.4.4.3 CGame: Frame Loop: Motion

If the current game state is not `eGameState::Loading`
(see \ref section5-4-4-1 "Section 5.4.4.1")
then `CGame::ProcessFrame()` does the following.
`CGame` inherits
from <a href="../sage/class_sage_1_1_c_component.html">`Sage::CComponent`</a>
a pointer `m_pSound` to
an instance of 
<a href="../sage/class_sage_1_1_c_sound.html">`Sage::CSound`</a>,
which provides functions to play and
mix sounds asynchronously. Function
<a href="../sage/class_sage_1_1_c_sound.html#acce2cf44671cf243cd1670853941d4c2">`Sage::CSound::BeginFrame()`</a>
is then called to notify the sound player that a new animation frame has begun.

\code{.cpp}
m_pSound->BeginFrame();
\endcode

This is used internally to SAGE to prevent any sound being started
twice (or more) in any given frame - which would result in the
sound being played at twice (or more) the volume.

`CGame` also inherits
from <a href="../sage/class_sage_1_1_c_component.html">`Sage::CComponent`</a>
a pointer `m_pTimer` to an instance of 
<a href="../sage/class_sage_1_1_c_timer.html">`Sage::CTimer`</a>,
 which provides functions to
accurately measure time. The motion of all game objects should
be proportional to frame time, otherwise things would move faster
on a 60Hz monitor than on a 30Hz monitor.
References to the timer should be inside a 
<a href="../sage/class_sage_1_1_c_timer.html#ab24d65d62c636f7b2a09d30380cc4ef0">`Sage::CTimer::Tick()`</a>
functor as follows:

\code{.cpp}
m_pTimer->Tick([&](){
  //time dependent code goes here
});
\endcode

We want to rotate the text wheel sprite by an angle proportional
to the frame time. The frame time is obtained by calling:

\code{.cpp}
m_pTimer->GetFrameTime()
\endcode

which returns the frame time in seconds as a `float`.

`CGame` has a member variable `m_pSpriteDesc` which will point to
a sprite descriptor
<a href="../sage/class_sage_1_1_c_sprite_desc2_d.html">`Sage::CSpriteDesc2D`</a>
that records properties
of the sprite such as its screen coordinates and angle of orientation.
Its orientation is stored in `m_pSpriteDesc->m_fRoll` in radians.
`CGame::ProcessFrame()` does the following once per frame:

\code{.cpp}
m_pSpriteDesc->m_fRoll += 0.125f*XM_2PI*m_pTimer->GetFrameTime();
\endcode

The `0.125f` multiplier ensures that the text wheel
rotates once every 8 seconds.

\anchor section5-4-4-4
#### 5.4.4.4 CGame: Frame Loop: Rendering

`CGame::ProcessFrame()` then renders an animation frame by calling
`CGame::RenderFrame()`. All rendering must be done
between calls to
<a href="../sage/class_sage_1_1_c_sprite_renderer.html#aa9fdd8301a51b7e7c853ed4a1649ac5e">`Sage::CSpriteRenderer::BeginFrame()`</a>
and
<a href="../sage/class_sage_1_1_c_sprite_renderer.html#a16dbd29c51dc0384d186b39671d8f5d8">`Sage::CSpriteRenderer::EndFrame()`</a>).
(Recall that `CGame` has a pointer to an instance of
<a href="../sage/class_sage_1_1_c_sprite_renderer.html">`Sage::CSpriteRenderer`</a>
in member variable `m_pRenderer`, see \ref section5-4-1 "Section 5.4.1").

If the game has finished loading sounds and sprites,
that is, if `m_eGameState` is not `eGameState::Loading`,
then we draw an animation frame by first drawing the
background with a call to:

\code{.cpp}
m_pRenderer->Draw(eSprite::Background, m_vWinCenter);
\endcode

Note that `CGame` inherits `m_vWinCenter`, a 2D vector `Vector2`
containing the position of the center of the user rectangle in the
game window
from
<a href="../sage/class_sage_1_1_c_settings.html">`Sage::CSettings`</a>.
We then draw the text wheel sprite at its current orientation using:

\code{.cpp}
m_pRenderer->Draw(m_pSpriteDesc);
\endcode

Since the background is drawn first, the text wheel will be drawn
on top of it (transparent pixels in the text wheel are omitted, naturally).
(Recall from \ref section5-4-1 "Section 5.4.1" that
our instance of
<a href="../sage/class_sage_1_1_c_sprite_renderer.html">`Sage::CSpriteRenderer`</a> uses batched mode
sprite rendering from DirectXTK12).
This method of rendering from back to front is called
_painter's algorithm_.

On the other hand, if
the game is still loading sounds and sprites,
that is, if `m_eGameState` is `eGameState::Loading`,
then we draw the text `Loading...` at the center of the window
using 
`Sage::CSpriteRenderer::DrawCenteredText()`:

\code{.cpp}
m_pRenderer->DrawCenteredText(L"Loading...");
\endcode

You probably won't see this text in the Blank Game,
or you might see it for a fraction of a second,
but you will see it on SAGE games that have
many more, and/or much larger sprites and sounds,
particularly if you don't have a solid state hard drive.

Finally, if the `CGame` member variable `m_bDrawFrameRate` is set to
`true`, which happens in `CGame::KeyboardHandler()` in response to
the F2 key, then `CGame::DrawFrameRateText()` is called to draw
the frame rate obtained from `m_pTimer->GetFPS()`
at the top right of the screen.

\anchor section5-4-4-5
#### 5.4.4.5 CGame: Frame Loop: Process Game State

`CGame::ProcessState()` processes any changes to the game
state that occurred in the current frame.
In the Blank Game this is very simple.
If `m_eGameState` is `eGameState::Loading`, we query the renderer and
the sound player to see whether they have finished loading,
that is, `m_pRenderer->Loaded()` returns `true` and
`m_pSound->Loaded()` returns `true`.
If so, we call `CGame::BeginGame()`, which sets
`m_eGameState` to `eGameState::Playing` and creates a new
sprite for the text wheel at the center of the screen.

Note that `CGame::BeginGame()` is also called from
`CGame::KeyboardHandler()` in response to the `Backspace`
key. Care must be taken here to avoid
memory leaks and crashes in your own game.
Recall that Visual Leak Detector (see \ref section4 "Section 4")
can be used in Debug mode to detect memory leaks.

\anchor section5-2-5
### 5.2.5 CGame: Shutting Down

As mentioned in \ref section5-1 "Section 5.1",
`CGame::Release()` contains shutdown code and will
be called once only when your game shuts down.
All it needs to do is delete the instance of
<a href="../sage/class_sage_1_1_c_sprite_renderer.html">`Sage::CSpriteRenderer`</a>),
which takes care of the details of shutting down DirectX 12.
It is important that this gets done before the destructor
`CGame::~CGame()` is called.

\anchor section6
# 6. What Next?

What's next are some <a href="../introgames/index.html">more games</a>
and some <a href="../introphysics/index.html">physics games and toys</a>

**/

