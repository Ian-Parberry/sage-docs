/**
\mainpage notitle 

\anchor sec1
# 1. Introduction

<em>Ned's Turkey Farm</em> is a simple 2.5D side scroller with graphics, 
particle effects, and sound in which you pilot a plane and kill crows.
The plane moves leftwards just to challenge your preconceptions about
side scrollers. \ref fig1 "Fig. 1" shows a screen shot.

\anchor fig1
\image html screenshot.png "Fig. 1: A screenshot of Ned's Turkey Farm." width=50%

\anchor sec2
# 2. Controls

<center>
<table>
<tr>
<td><center><b>Key</b></center></td>
<td><center><b>Action</b></center></td>
  <tr>
    <td><center>F1</center></td>
    <td>Help (this document)</td>
  <tr>
    <td><center>F2</center></td>
    <td>Toggle frame rate display</td>
  <tr>
    <td><center>F3</center></td>
    <td>Show 3D view</td>
  <tr>
    <td><center>Up arrow</center></td>
    <td>Gain height</td>
  <tr>
    <td><center>Down arrow</center></td>
    <td>Lose height</td>
  <tr>
    <td><center>Left arrow</center></td>
    <td>Move faster</td>
  <tr>
    <td><center>Right arrow</center></td>
    <td>Move slower</td>
  <tr>
    <td><center>Space</center></td>
    <td>Shoot</td>
  <tr>
    <td><center>Backspace</center></td>
    <td>Restart game</td>
  <tr>
    <td><center>PrtScr</center></td>
    <td>Save screenshot to a PNG file</td>
  <tr>
    <td><center>ESC</center></td>
    <td>Exit</td>
</table>
</center>

\anchor sec3
# 3. SAGE

This code uses <a href="../sage/index.html">SAGE</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`3. Tiled Platformer`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-games`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Tiled Platformer.sln`</span>
 with Visual Studio and build the Release configuration.
The Release executable file <span style="background-color:#D8E4D8;">`Tiled Platformer.exe`</span>
will appear. 
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor sec4
# 4. Game Play

Run <span style="background-color:#D8E4D8;">`Ned's Turkey Farm.exe`</span>
and do the following.

<ol>
<li>
Notice that the background is more 3-dimensional than in previous games.
If you play for long enough the background loops.
<li>
Use the controls (see \ref sec2 "Section 2") to maneuver the plane up and down.
Notice that the camera pivots down when the plane is below its initial height, and
moves upwards when the plane is above its initial height.
<li>
Use the controls (see \ref sec2 "Section 2") to hunt down the crows and shoot them.
Notice that they do a pretty good job of avoiding you.
<li>
Smack the plane into the ground to see smoke particle effects.
<li>
Hold down the `F3` key to move the camera back and across so you can see
what is really going on in 3D (see \ref fig7 "Fig. 7").
</ol>

\anchor sec5
# 5. Code Breakdown

Open <span style="background-color:#D8E4D8;">`Ned's Turkey Farm.sln`</span>
in Visual Studio and examine the
code in the editor while you read the
rest of this section.
This section assumes that you have read and understood
the documentation from 
<a href="../sage/index.html">SAGE</a>,
<a href="../blank/index.html">The Blank Game</a>,
<a href="../topdown/index.html">The Top Down Game</a>,
<a href="../topdowntiled/index.html">The Top Down Tiled Game</a>
and
<a href="../platformer/index.html">The Tiled Platformer</a>.

How does this code differ from previous games?

\anchor sec5-1
## 5.1 The Third Dimension

<em>Ned's Turkey Farm</em> is a 2.5D game, which means that it is a 3D
game with 2D sprite art. It has its own renderer class
`CRenderer` which is derived from `Sage::CSpriteRenderer` and is instantiated with

    Sage::CSpriteRenderer(Sage::eSpriteMode::Unbatched3D)
    
whereas previous
<a href="../sage/index.html">SAGE</a> games
(<a href="../blank/index.html">The Blank Game</a>,
<a href="../topdown/index.html">The Top Down Game</a>,
<a href="../topdowntiled/index.html">The Top Down Tiled Game</a>
and
<a href="../platformer/index.html">The Tiled Platformer</a>)
used

    Sage::CSpriteRenderer(Sage::eSpriteMode::Batched2D)

Sprite descriptors are now 3D, that is, 
<a href="../sage/class_sage_1_1_c_sprite_desc3_d.html">`Sage::CSpriteDesc3D`</a> 
is used instead of
<a href="../sage/class_sage_1_1_c_sprite_desc2_d.html">`Sage::CSpriteDesc2D`</a>.
While `Sage::CSpriteDesc2D::m_vPos` is a 2D vector `Vector2`,
`Sage::CSpriteDesc3D::m_vPos` is a 3D vector `Vector3`,
which has a third coordinate for the Z axis.
The Z axis is at right angles to both the X and Y axes,
but there are two directions to choose from. If the X axis is along the
bottom of your screen with positive X to the right and the
Y axis is along the side of your screen with positive Y upwards, then
there are two choices for the positive Z axis. It can either point into the
screen or out of the screen. Either choice is as good as the other but you
<em>must make sure that all of your code is consistent with this choice</em>.

<a href="../sage/index.html">SAGE</a> uses what is called a <em>left-handed coordinate system</em>.
Take your left hand and make your thumb point towards positive X,
your index finger to positive Y, and put your third finger at right angles to them.
Then your third finger points in the direction of positive Z,
into the screen
as shown in \ref fig2 "Fig. 2".
Similarly, using your right hand points your third finger in the
opposite direction, out of the screen, in what is called a
<em>right-handed coordinate system</em>.

\anchor fig2
\image html axes.png "Fig. 2: The principal axes in left-handed coordinate space." width=30%

<a href="../sage/class_sage_1_1_c_sprite_desc2_d.html">`Sage::CSpriteDesc2D`</a>
has one rotation angle `Sage::CSpriteDesc2D::m_fRoll` which makes sense because
there is only axis to rotate about, which we now know as the Z axis.
In 3D there are now three principal axes about which to rotate.
Rotation about the
X axis is called <em>pitch</em> and is stored in
`Sage::CSpriteDesc3D::m_fPitch`, and rotation about the
Y axis is called <em>yaw</em> and is stored in
`Sage::CSpriteDesc3D::m_fYaw`.

Recall that in 2D we chose positive angles of rotation to be counterclockwise.
There is a useful convention for this based on handedness.
In a left-handed coordinate system take your left hand, make a fist
with your thumb sticking out and pointing along the positive Z axis. Look at your
curled fingers from the negative Z side. The direction that they
curl is a positive angle of rotation along the Z axis. Your can see from
\ref fig3 "Fig. 3" that this is a counterclockwise direction,
which is consistent with our 2D games.
You can find the direction of positive rotation about any axis by pointing your
thumb in the positive direction and viewing the curl of your fingers from
the negative side of the axis. 

\anchor fig3
\image html roll.png "Fig. 3: Positive roll in left-handed coordinate space is counterclockwise." width=30%

\anchor sec5-2
## 5.2 The Background

The background for <em>Ned's Turkey Farm</em> consists of a sky image
(\ref fig4 "Fig. 4", left) that can be repeated horizontally without
the join showing (\ref fig4 "Fig. 4", right), and a ground image
(\ref fig5 "Fig. 5", left) that can be repeated horizontally without
the join showing (\ref fig5 "Fig. 5", right).

\anchor fig4
\image html sky.png "Fig. 4: The sky sprite (left) can be tiled (right)." width=60%

\anchor fig5
\image html ground.png "Fig. 5: The ground sprite (left) can be tiled (right)." width=60%

The sky and ground images are put together in an L shape as shown
in \ref fig6 "Fig. 6". This is referred to in the code as a <em>cell</em>.
The sky part of the cell is in the XY plane, that is, at right
angles to the Z axis. This is the default for sprites when
yaw and pitch are set to zero.
The ground part of the cell is in the XZ plane, that is, at right
angles to the Y axis. We will achieve this by setting its pitch to \f$\pi/2\f$.

\anchor fig6
\image html cell.png "Fig. 6: A single cell in 3D." width=60%

The background cells are drawn by `CObjectManager::DrawBackground`
using `CObjectManager::m_cSkyDesc` for the sky 3D sprite descriptor and
`CObjectManager::m_cGrndDesc` for the ground 3D sprite descriptor.
Notice that `CObjectManager::m_cGrndDesc.m_fPitch` is set to
\f$\pi/2\f$ in `CObjectManager::Clear`.
The number of cells drawn is
CObjectManager::`m_nNumCells` for the game play area plus
an extra cell to the left and right for when the camera is
near the leftmost and rightmost edge of the play area, respectively.



\anchor fig7
\image html f3.png "Fig. 7: What's really going on in the game." width=90%

\anchor sec5-3
## 5.3 Depth Sorting

\anchor fig8
\image html nodepthsort.png "Fig. 8: Errors in depth sorting." width=60%

In \ref fig8 "Fig. 8" (left), the crow's Z coordinate is behind the plane's
Z coordinate but the plane is drawn first, resulting in the transparent
pixels of the plane sprite canceling out the crow's body (see the yellow arrow)
leaving just its
head sticking out to the left of the plane.
In \ref fig8 "Fig. 8" (right), the crow's Z coordinate is in front of the plane's
Z coordinate but the crow is drawn first, resulting in the transparent
pixels of the crow sprite canceling out the part of the plane's tail (see the yellow arrow).

\anchor sec6
# 6. What Next?

You might want to look at <a href="../introphysics/index.html">Physics Games and Toys</a> next.

**/
