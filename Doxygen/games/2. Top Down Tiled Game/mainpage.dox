/**
\mainpage notitle

\anchor section1
# 1. Introduction

This game is similar to the 
<a href="../topdown">Top Down Game</a>
with the addition of a tiled background that is read from a text map, and
multiple levels with multiple guards.
\ref fig1 "Fig. 1" shows one of the levels.
Notice that we are re-using the player and guard sprites from
<a href="../topdown/index.html">The Top Down Game</a>, but rendering them smaller.

\anchor fig1
\image html screenshot.png "Fig. 1: A screenshot of the Top Down Tiled Game." width=40%

The remainder of this page is divided into four sections.
\ref sec2 "Section 2" lists the controls
and their corresponding actions,
\ref sec3 "Section 3" tells you how to build it,
\ref sec4 "Section 4" gives you a list of actions to take in the game to see some of its
important features,
\ref sec5 "Section 5" gives a breakdown of the code,
and
\ref sec6 "Section 6" addresses the question "what next?".

\anchor sec2
# 2. Controls

<center>
  <table>
    <tr>
      <td><center><b>Keyboard</b></center></td>
      <td><center><b>Controller</b></center></td>
      <td><center><b>Mouse</b></center></td>
      <td><center><b>Action</b></center></td>
    <tr>
      <td><center>F1</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Help (this document)</td>
    <tr>
      <td><center>F2</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Toggle frame rate display</td>
    <tr>
      <td><center>F3</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Toggle show bounds</td>
    <tr>
      <td><center>F4</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Toggle show NPC state</td>
    <tr>
      <td><center>-</center></td>
      <td>Right thumb</td>
      <td>Move left*</td>
      <td>Rotate counterclockwise</td>
    <tr>
      <td><center>-</center></td>
      <td>Right thumb</td>
      <td>Move right*</td>
      <td>Rotate clockwise</td> 
    <tr>
      <td><center>Space</center></td>
      <td>Right button</td>
      <td>Left button</td>
      <td>Shoot</td>
    <tr>
      <td><center>A</center></td>
      <td>Digital pad left</td>
      <td><center>-</center></td>
      <td>Strafe left</td>
    <tr>
      <td><center>D</center></td>
      <td>Digital pad right</td>
      <td><center>-</center></td>
      <td>Strafe right</td>
    <tr>
      <td><center>G</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Toggle God mode</td>
    <tr>
      <td><center>S</center></td>
      <td>Digital pad down</td>
      <td><center>-</center></td>
      <td>Retreat</td>
    <tr>
      <td><center>W</center></td>
      <td><center>-</center></td>
      <td>Right trigger</td>
      <td>Move forwards</td>
    <tr>
      <td><center>Backspace</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Restart game</td>
    <tr>
      <td><center>PrtScr</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Save screenshot to a PNG file</td>
    <tr>
      <td><center>Esc</center></td>
      <td><center>-</center></td>
      <td><center>-</center></td>
      <td>Exit</td>
  </table>
</center>

 `*` Note that the mouse cursor must be inside the game window for player
rotation to occur.

\anchor sec3
# 3. Building the Game

This code uses <a href="../sage/index.html">SAGE</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`2. Top Down Tiled Game`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-games`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Top Down Tiled Game.sln`</span>
 with Visual Studio and build the Release configuration.
The Release executable file <span style="background-color:#D8E4D8;">`Top Down Tiled Game.exe`</span>
will appear. 
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor sec4
# 4. Game Play

Run <span style="background-color:#D8E4D8;">`Top Down Tiled Game.exe`</span>
and do the following: 

UNDER CONSTRUCTION

\anchor sec5
# 5. Code Breakdown

Open <span style="background-color:#D8E4D8;">`Top Down Tiled Game.sln`</span> in Visual Studio and examine the
code in the editor while you read the
rest of this section.
This section assumes that you have read and understood
the documentation from 
<a href="../sage/index.html">SAGE</a>,
<a href="../blank/index.html">The Blank Game</a>,
and <a href="../topdown/index.html">The Top Down Game</a>.

Changes from <a href="../topdown/index.html">The Top Down Game</a> include ...

\anchor sec5-1
## 5.1 The Tile Manager

The tile manager `CTileManager` is declared in `TileManager.h` and defined in `TileManager.cpp`.
It is derived from 
<a href="../docs/sage/class_sage_1_1_c_settings.html">`Sage::CSettings`</a>
and `CCommon`.
The tile manager's responsibilities include
reading the current level from a text file
in <span style="background-color:#D8E4D8;">`Media\Maps`</span> and interpreting it to `CGame`
to specify the background image and
initial object positions.
The tile manager header file `TileManager.h` also includes the a
declaration for an _object descriptor_ `CObjectDesc` that will be used to
encapsulate properties of a game object interpreted from the map file for
transfer to the object manager.

\anchor sec5-1-1
## 5.1.1 Map File Format

The map files consist of upper and lower case letters in which
each letter represents a background tile and/or the initial placement
for a game object, and each line represents a row of tiles and/or objects.
The letters are interpreted as follows.
`W` represents a wall tile.
`F` represents a floor tile. 
Upper case characters `U`, `D`, `L`, or `R` represent the player
character oriented with its gun pointing
up, down, left, or right, respectively.
There should be only one of these in the file.
Lower case characters `u`, `d`, `l`, or `r` represent a guard
character oriented with its gun pointing
up, down, left, or right, respectively.
There may be more than one of these in the file.
The player and guard characters are assumed to be on a floor tile.
For example,
the file <span style="background-color:#D8E4D8;">`Media\Maps\small.txt`</span>
contains the specification for the
map shown in \ref fig1 "Fig. 1", as follows:

    WWWWWWWWWWWWWWWW
    WFFFFFFWFFFFFFFW
    WFFFFFFWFFFFFdFW
    WFFFFFFFFFFFFFFW
    WFFFFFFFFFFFFFFW
    WFFFFFFWFFFFFFFW
    WFFFFFFWFFFFFFFW
    WWWFFWWWWWWWFFFW
    WFFFFFFFFFFWFFFW
    WFFFFFFFFFFWFFFW
    WFFFFFFFFFFWFFFW
    WFFFFFFFFFFWFFFW
    WFFFFFFFFFFWFFFW
    WFFFUFFFFFFFFFFW
    WFFFFFFFFFFFFFFW
    WWWWWWWWWWWWWWWW

`CGame::BeginGame` reads
the map for the current level into a 2D array of characters
`CTileManager::m_chMap`
by calling `CTileManager::LoadMap` with the text file name as the parameter.
In the next subsection we will see how the tile manager
uses `CTileManager::m_chMap` to draw the tiled background in
`CTileManager::Draw`.

\anchor sec5-1-2
## 5.1.2 Drawing Tiles

\anchor fig2
\image html tiles.png "Fig. 2: The tiles." width=15%

There are three different type of tile sprite shown in \ref fig2 "Fig.2",
the floor tile (left),
the wall tile (middle), and
the error tile (right).
The error tile should never appear in your game - if it does then you have an
error in your text map.
These three tiles are input from files `tile0.png`, `tile1.png`, and `tile2.png`
into the three-frame sprite `eSprite::Tile`, as indicated by the following
line in `Gamesettings.xml`.

```xml
<sprite name="tile" file="tile" ext ="png" frames="3"/>
```
We can then load the sprite from this description with the line

```C
  media.Insert(eSprite::Tile, "tile");
```

in `CGame::LoadSprites`
using the `name` field from the `<sprite>` tag as the second parameter.
This is how you load sprites from different files numbered 0, 1, 2, etc.,
as opposed to the animated sprite for the 
<a href="../topdown/index.html#reload-animation">guard</a>,
which is loaded from a sprite sheet.
The floor and wall tiles should roughly line up without any
gap, for example, \ref fig3 "Fig. 3." shows that the wall tile
at the center lines up with the four tiles that it touches.

\anchor fig3
\image html tiledwall.png "Fig. 3: A 3x3 tiling using wall tiles." width=15%

Enumerated type member `eSprite::Tile` is passed to `CTileManager::Draw`,
which draws the tiled background from `CTileManager::m_chMap` using the first frame of the tile
sprite as the floor, the second frame as the walls, and the third frame in case of error
(see \ref fig2 "Fig. 2").
`CTileManager::Draw`
is called from `CObjectManager::Draw`,
which is called from `CGame::RenderFrame`.

\anchor sec5-1-3
## 5.1.2 Collision Detection With Walls

Collision detection and response for objects colliding
with walls is done with _axially aligned bounding boxes_
(AABBs for short), which are boxes with their edges aligned with
the principal axes. Although we are in a 2D game, we will use the
3D bounding box `DirectX::BoundingBox` for convenience, fudging the
Z dimension as we go. `CTileManager` has a list of AABBs for the walls
in a private member variable of type `std::vector<DirectX::BoundingBox>`
called CTileManager::`m_vecWalls`. It is tempting to use an AABB for each wall tile,
but that would mean that even small maps like the one shown in
\ref fig1 "Fig. 1" would need 78 AABBs, whereas these can be collapsed
into 9 overlapping AABBs as shown in \ref fig4 "Fig. 4".

\anchor fig4
\image html aabbs.png "Fig. 4: AABBs for the walls." width=40%

These large AABBs are created using function `CTileManager::MakeBoundingBoxes`,
which is called from `CTileManager::LoadMap` after the map has been loaded.
`CTileManager::MakeBoundingBoxes` consists of three phases,
`CTileManager::MakeBoundingBoxesH` for horizontal bounding boxes that consist
of at least two tiles, 
`CTileManager::MakeBoundingBoxesV` for vertical bounding boxes that consist
of at least two tiles, and `CTileManager::MakeBoundingBoxes1` for bounding
boxes that consist of a single tile.


\anchor sec6
# 6. What Next?

Next, take a look at the <a href="../platformer/index.html">Tiled Platformer</a>.

**/
