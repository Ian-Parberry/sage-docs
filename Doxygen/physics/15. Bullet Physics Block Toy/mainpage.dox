/**
\mainpage notitle

\anchor section1
# 1. Introduction

A simple 3D toy using 
[Bullet Physics](https://pybullet.org/wordpress/) consisting of various
things that you can knock over by throwing soccer
balls at them. With enough patience and perseverance you can
push everything off the edge of the world. Shapes and models
are rendered using `GeometricPrimitive` and `Model` from
DirectXTK12. The models are input using the built-in 
function `Model::CreateFromSDKMESH` which requires that the
models be in SDKMESH format. The 3D models are from
[free3d.com](https://free3d.com/) and were converted
from OBJ format using `DirectXMesh`. 

\anchor fig1
\image html screenshot.png "Fig. 1: Screen shots of various objects." width=95%

\anchor section2
# 2. Keyboard Controls

This toy can be played with either the keyboard or an 
XBOX controller. 

<center>
  <table>
    <tr>
      <td><center><b>Keyboard</b></center></td>
      <td><center><b>Controller</b></center></td>
      <td><center><b>Action</b></center></td>
    <tr>
      <td><center>F1</center></td>
      <td><center>-</center></td>
      <td>Help (this document)</td>
    <tr>
      <td><center>Space</center></td>
      <td><center>Right button</center></td>
      <td>Throw a ball along the view vector.</td>
    <tr>
      <td><center>Arrow keys</center></td>
      <td><center>Right stick</center></td>
      <td>Camera orientation.</td>
    <tr>
      <td><center>WASD</center></td>
      <td><center>Dpad</center></td>
      <td>Camera motion (relative to the view vector).
    <tr>
      <td><center>Backspace</center></td>
      <td><center>A</center></td>
      <td>Reset to initial conditions.</td>
    <tr>
      <td><center>PrtScr (hold down)</center></td>
      <td><center>-</center></td>
      <td>Save screenshot to a PNG file</td>
    <tr>
      <td><center>Esc</center></td>
      <td><center>-</center></td>
      <td>Quit game and close the window</td>
  </table>
</center>

\anchor section3
# 3. Building the Game

This code uses <a href="../sage/index.html">SAGE</a>
and [Bullet Physics](https://pybullet.org/wordpress/).
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>
and the <a href="../installphysics/index.html">Bullet Physics Installation Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`15. Bullet Physics Block Toy`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Bullet Physics Block Toy.sln`</span>
 with Visual Studio and build the Release configuration.
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

UNDER CONSTRUCTION

\anchor section5
# 5. Code Breakdown

UNDER CONSTRUCTION

\anchor section6
# 6. What Next?

This 3D toy is pretty rudimentary. Here is a To Do list of things that I need to get around to doing. 

+ The polygonal shapes are not placed correctly. In particular, the dodecahedron needs to be rotated.
+ Add the ability to use a convex hull for collisions on the models. I've gotten it working on the geometric primitives, but that's only because I save a local copy of the vertices. I've tried to access the vertices in a `Model`, but there seems to be no local copy. I can either override the DirectXTK12 function that loads from an `sdkmesh` or bite the bullet and write an `obj` file loader (saving a local copy of the vertex buffer in either). 
+ An `obj` file reader might be a good idea anyway. While you might prefer to shop a game with models in `sdkmesh` format, it might be better if we could use `obj`s in class.
+ Add in the rest of the geometric primitives that DirectXTK12 provides, including cylinders and cones.
+ Use Bullet joints to make a table out of 4 cylinders and a block with bounding boxes around each part. Have the table come apart after enough hits.
+ Currently the camera can pass through objects, which is why back-face culling is currently turned off. Use Bullet Physics to prevent this from happening, then turn on back-face culling for a 2x increase in rendering speed.
+ A lot of the parameters for meshes and models are hard-coded. It would be better to read them from `gamesettings.xml` along with the other settings instead. Derive a class from `Sage::CSettings` and write the code for this.

**/