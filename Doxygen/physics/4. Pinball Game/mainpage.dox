/**
\mainpage notitle

\anchor section1
# 1. Introduction

This is a rudimentary pinball machine designed to put the
[Shapes Library](../shapes/index.html)
library we developed for the
[Collision Math Toy](../collisionmath/index.html)
to good use. 
The aim of the game is to get as high a score as you can. 
In addition to being a minigame that you can actually play, the Pinball 
Game allows the player to change the draw mode from the normal
"sprites only" mode in which the game will be shipped
(\ref fig1 "Fig. 1", left),
a "sprites and lines"
mode in which the shapes are drawn in black over the sprites so that
you can check that the sprites actually align with the shapes
(\ref fig1 "Fig. 1", middle),
and "lines only" mode (\ref fig1 "Fig. 1", right)
because it looks cool. The game can be played
in any of the three draw modes.

\anchor fig1
\image html screenshot.png "Fig. 1: Screen shot." width=60%

The remainder of this page is divided into five sections.
\ref section2 "Section 2" lists the controls
and their corresponding actions,
\ref section3 "Section 3" tells you how to build it,
\ref section4 "Section 4" gives you a list of actions to take in the game to see some of its
important features,
\ref section5 "Section 5" gives a breakdown of the code,
\ref section6 "Section 6" contains some programming problems,
and
\ref section7 "Section 7" addresses the question "what next?".

\anchor section2
# 2. Controls

<center>
<table>
<tr>
<td><center><b>Key</b></center></td>
<td><center><b>Action</b></center></td>
<tr>
<td><center>F1</center></td>
<td>Help (this document)</td>
<tr>
<td><center>F2</center></td>
<td>Toggle frame rate display</td>
<tr>
<td><center>F3</center></td>
<td>Toggle draw mode from "sprites only", to "sprites and lines", to "lines only"</td>
<tr>
<td><center>Space</center></td>
<td>Load a ball (first press) and launch it (second press)</td>
<tr>
<td><center>Left shift</center></td>
<td>Left flipper up while key is down</td>
<tr>
<td><center>Right shift</center></td>
<td>Right flipper up while key is down</td>
<tr>
<td><center>PrtScr (hold down)</center></td>
<td>Save screenshot to a PNG file</td>
<tr>
<td><center>Esc</center></td>
<td>Quit game and close the window</td>
</table>
</center>

\anchor section3
# 3. Building the Game

This code uses <a href="../sage/index.html">SAGE</a> and the <a href="../shapes/index.html">Shapes Library</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>
and the <a href="../shapes/index.html#section3">Shapes Library Build Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`4. Pinball Game`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Pinball Game.sln`</span>
 with Visual Studio and build the Release configuration.
The Release executable file <span style="background-color:#D8E4D8;">`Pinball Game.exe`</span>
will appear. 
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

Do I have to tell you how to play
<a href="https://en.wikipedia.org/wiki/Pinball">pinball</a>?
Refer back to \ref section2 "Section 2" to see the flipper and
ball launch keys.

\anchor section5
# 5. Code Breakdown

This code uses the
<a href="../shapes/index.html">Shapes Library</a>
and some code from the 
<a href="../collisionmath/index.html">Collision Math Toy</a>
to make a rudimentary pinball game.
The most challenging part of the code is
the creation of the shapes in the play area
as shown in \ref fig1 "Fig. 1", right.
This is done in `CGame::BeginGame` by calling
`CObjectManager::MakeWorldEdges` to make various static edges and arcs,
and `CObjectManager::MakeShapes` to make the other various shapes,
which in turn calls
`CObjectManager::MakeBumper`,
`CObjectManager::MakeBollard`,
`CObjectManager::MakeFlipper`,
`CObjectManager::MakeThingL`,
`CObjectManager::MakeThingR`,
and
`CObjectManager::MakeShape`. 

\anchor section6
# 6. Problems

For the following problems you can either work directly in the
folder <span style="background-color:#D8E4D8;">`4. Pinball Game`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository,
or (recommended) make a copy of the folder <span style="background-color:#D8E4D8;">`4. Pinball Game`</span>
in some place convenient (for example, the Desktop or your `Documents` folder)
and work there.

\anchor problem4-1
## Problem 4.1

<div style="padding-left: 30px;" markdown="1">
Add the following function to `CObjectManager` to create a regular polygonal bumper
with `n` sides, centered at `p`, with elasticity `e`, sprites `unlit` and `lit`,
which when hit makes sound `snd` and adds `nScore` to the score.
Each polygonal bumper will be an instance of
<a href ="../shapes/class_shapes_1_1_c_compound_shape.html">`Shapes::CCompoundShape`</a>.

    void CObjectManager::MakeBumper(UINT n, const Vector2& p, float e, 
      eSprite unlit, eSprite lit, eSound snd, int nScore)
    {   
      if(n < 3)ABORT("Too few edges in polygon");
    
      CObjDesc nullObjDesc(eSprite::None, eSprite::None, snd);
      CObjDesc bumperObjDesc(unlit, lit, snd);
      bumperObjDesc.m_nScore = nScore;
    
      CObjDesc lineDesc(eSprite::BlackLine, eSprite::BlackLine, snd);
      Shapes::CPointDesc pointDesc(p);
    
      Shapes::CShape* pCenterPoint = AddShape(&pointDesc, bumperObjDesc);
      Shapes::CCompoundShape* pBumper = new Shapes::CCompoundShape(pCenterPoint); 
    } //MakeBumper

Append to the end of this function code to add the appropriate shapes from the
<a href="../shapes/index.html">Shapes Library</a> to the compound shape pointed to by `pBumper`.
Then in `CObjectManager::MakeShapes`, replace the lines

    MakeBumper(Vector2(mid + 14.0f - dx, y), e, unlit, lit, snd);
    MakeBumper(Vector2(mid + 14.0f,      y), e, unlit, lit, snd);
    MakeBumper(Vector2(mid + 14.0f + dx, y), e, unlit, lit, snd);

with the following lines

    Vector2 pos = Vector2(mid + 14.0f - dx, y);
    MakeBumper(3, pos, e, eSprite::UnlitTriangle, eSprite::LitTriangle, snd, 10);
    pos.x += dx;
    MakeBumper(4, pos, e, eSprite::UnlitSquare, eSprite::LitSquare, snd, 100);
    pos.x += dx;
    MakeBumper(5, pos, e, eSprite::UnlitPentagon, eSprite::LitPentagon, snd, 100);

Your game should now look like \ref fig2 "Fig. 2" left, with the collision shapes
in \ref fig2 "Fig. 2" right aligned with the edges of the polygons.
When you play the game the balls should collide correctly with the polygon edges and points,
but the bumpers will not light up. That is the subject of the next question.
</div>

\anchor fig2
\image html screenshot2.png "Fig. 2: Screen shot with polygonal bumpers." width=60%

\anchor problem4-2
## Problem 4.2

<div style="padding-left: 30px;" markdown="1">
After completing \ref problem4-1 "Problem 4.1",
add code to `CObjectManager::NarrowPhase` to make the polygonal
bumpers light up when hit.

###Hints:

Keep a vector of pointers to the new polygons 

    std::vector<Shapes::CCompoundShape*> m_vBumperList;

and push a pointer to each polygonal bumper to the back of it in your function
`CObjectManager::MakeBumper` from \ref problem4-1 "Problem 4.1".
Then at the end of `CObjectManager::NarrowPhase`, if the local variable `bHit` is `true`
then use the function
<a href="../shapes/class_shapes_1_1_c_compound_shape.html#abef3eafc01c529d2d9618be7c3fc604e">`CCompoundshape::IsPartOf`</a>
to check whether `pShape`
is a part of each bumper. If so, then get the bumper's central
point using
<a href="../shapes/class_shapes_1_1_c_compound_shape.html#a70c09b0cf7fe31caa0f793d589a398cc">`CCompoundShape::GetCenterPoint`</a>,
then get a pointer
to the bumper object by using that point's
<a href="../shapes/class_shapes_1_1_c_shape.html#a712df6c7164d15900bddefc1a16d0136">`CShape::GetUserPtr`</a>
function
and casting it to `CObject*`.  You can then set the object's
`CObject::m_bRecentHit` and `CObject::m_fLastHitTime` to the appropriate values,
which will then make the bumpers light up when hit.
</div>

\anchor section7
# 7. What Next?

Next, take a look at the <a href="../ballandspring/index.html">Ball and Spring Toy</a>.



**/
