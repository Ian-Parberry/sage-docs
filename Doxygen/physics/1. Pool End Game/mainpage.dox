/**
\mainpage notitle

\anchor section1
# 1. Introduction

This is the Pool End Game, a simple minigame that uses
hand-written physics code based on Euler integration.

\anchor fig1
\image html ss0.png "Fig. 1: The Pool End Game at the start of a game." width=50%

\anchor section2
# 2. Keyboard Controls

<center>
<table>
<tr>
<td><center><b>Key</b></center></td>
<td><center><b>Action</b></center></td>
<tr>
<td><center>Esc</center></td>
<td>Exit</td>
<tr>
<td><center>F1</center></td>
<td>Help (this document)</td>
<tr>
<td><center>F2</center></td>
<td>Toggle frame rate</td>
<tr>
<td><center>F3</center></td>
<td>Toggle step mode</td>
<tr>
<td><center>F4</center></td>
<td>Toggle collision mode</td>
<tr>
<td><center>Up arrow</center></td>
<td>Move cue ball upwards on the base line</td>
<tr>
<td><center>Down arrow</center></td>
<td>Move cue ball downwards on the base line</td>
<tr>
<td><center>Left arrow</center></td>
<td>Rotate impulse vector counterclockwise</td>
<tr>
<td><center>Right arrow</center></td>
<td>Rotate impulse vector clockwise</td>
<tr>
<td><center>Page up</center></td>
<td>Rotate impulse vector counterclockwise fast</td>
<tr>
<td><center>Page down</center></td>
<td>Rotate impulse vector clockwise fast </td>
<tr>
<td><center>Space</center></td>
<td>Fire cue ball/start new game/take step in Step Mode</td>
<tr>
<td><center>PrtScr (hold down)</center></td>
<td>Save screenshot to a PNG file</td>
</table>
</center>

\anchor section3
# 3. Building the Game

This code uses <a href="../sage/index.html">SAGE</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`1. Pool End Game`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Pool End Game.sln`</span>
 with Visual Studio and build the Release configuration.
The Release executable file <span style="background-color:#D8E4D8;">`Pool End Game.exe`</span>
will appear. 
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

\anchor section4-1
## 4.1 Actual Game Play

The aim of the game is to sink the 8-ball while not sinking the cue-ball.
The initial state of the game is shown in \ref fig1 "Fig. 1",
with the cue-ball on the base line to the left and the 8-ball on
the dot at the right. An arrow shows the direction that the cue-ball
will travel when hit by the imaginary cue, which will happen
when the player hits the `Space` bar. We can call this vector the
_impulse vector_.
Before the initial hit, the
player can move the cue-ball up and down on the base line by holding down
the up and down arrow keys. For example, \ref fig2 "Fig. 2" 
shows the cue-ball moved up along the base line.

\anchor fig2
\image html ss1.png "Fig. 2: The Pool End Game at the start of a game with the cue ball moved upwards." width=50%

Notice that, as shown in  \ref fig2 "Fig. 2", the impulse vector always
points to the 8-ball while the cue-ball is moved up or down along the
base line. The player can rotate the impulse vector by holding down
the appropriate key (see \ref section2 "Section 2").
For example \ref fig3 "Fig.3" shows the impulse vector rotated slightly
counterclockwise from the center of the 8-ball.

\anchor fig3
\image html ss2.png "Fig. 3: The Pool End Game at the start of a game with the impulse vector rotated counterclockwise." width=50%

The impulse vector is hidden when the balls are in motion.
The impulse vector reappears when the balls come to rest,
pointing to the center of the 8-ball. At this point the
player can rotate the impulse vector using the same keys as
before, and shoot using the `Space` bar.
Eventually (depending on the skill of the player) either the
cue-ball will go into one of the six pockets at the corners and
horizontal centers of the table, in which case the player loses
the game (see \ref fig4 "Fig. 4", right), or the 8-ball goes into
a pocket while the cue-ball remains on the table,
in which case the player wins  (see \ref fig4 "Fig. 4", left). 

\anchor fig4
\image html winlose.png "Fig. 4: The Pool End Game after winning (left) and losing (right)." width=90%

After a short pause, or when the player hits the `Space` bar, the
game begins again as shown in \ref fig1 "Fig. 1".

\anchor section4-2
## 4.2 Step Mode
 
In addition to being a minigame that you can actually play, the Pool
End Game allows the player to toggle in and out of _step mode_ in which the ball
advances by 1/30th of a second each time the space bar is pressed and leaves
a trail of markers as shown in \ref fig5 "Fig. 5".
Step Mode is intended to help the player
visualize the discrete nature of video game time 
(see \ref section5-1 "Section 5.1").
When the game is in step mode a pair of footprints will
appear at the lower left corner of the table, as shown in \ref fig5 "Fig. 5".

\anchor fig5
@image html screenshot.png "Fig. 5. Step Mode after the space bar has been depressed about 16 times." width=50%

\anchor section4-3
## 4.3 Collision Mode

The player can also
toggle in and out of _collision mode_, which displays yellow circles at the
positions of the balls at time of impact with each other and with the rails.
When the game is in collision mode a small black circle will
appear at the lower left corner of the table, as shown in \ref fig6 "Fig. 6".

\anchor fig6
@image html screenshot0.png "Fig. 6. Collision mode after a ball-to-ball collision and 3 ball-to-rail collisions." width=50%

Suppose we number the yellow collision circles from \ref fig6 "Fig. 6",
as shown in \ref fig7 "Fig. 7". Circles 1 and 2 are from a collision between
the cue-ball (the left circle) and the 8-ball (the right circle). The
cue-ball travels up and to the right and collides with the top rail
at circle 3, rebounding to the position shown.
At the same time the 8-ball collides with the right rail at circle 4,
then the bottom rail at circle 5, rebounding to the position shown.

\anchor fig7
@image html screenshot0a.png "Fig. 7. Collision mode with numbered collisions." width=50%

\anchor section5
# 5. Code Breakdown

This section assumes that you have fully read and understood the
documentation for <a href="../sage/index.html">SAGE</a>
and <a href="../blank/index.html">The Blank Game</a>.
The most interesting parts of this code from a game physics
perspective are the object motion code in `CObject` and the
collision detection and response code in `CObjectManager`.
These are covered in \ref section5-1 "Section 5.1" and
\ref section5-2 "Section 5.2", respectively.

\anchor section5-1
## 5.1 %CObject

The `CObject` is the abstract representation of an object, which in this game
means the cue-ball and the 8-ball.
`CObject` stores, among other things, an object's position `CObject::m_vPos`
and velocity vector `CObject::m_vVel`. Don't be distracted by `CObject::m_vOldPos`,
which is used solely to determine where to drop a circle particle
in step mode (see \ref section4-2 "Section 4.2").
`CObject::Move` handles ball motion and `CObject::DeliverImpulse`
delivers an impulse for when the player hits the cue-ball.
These are described in \ref section5-1-1 "Section 5.1.1" and
\ref section5-1-2 "Section 5.1.2", respectively.


\anchor section5-1-1
### 5.1.1 %CObject::Move

Function `CObject::Move` gets called once per animation
frame for each of the balls, resulting the the balls
skipping across the table in discrete jumps. However,
if the frame rate is high enough, the human brain will
interpret the jaggy motion as one continuous sweep.
Step mode will help you to visualize this
(see \ref section4-2 "Section 4.2").

\anchor section5-1-2
### 5.1.2 %CObject::DeliverImpulse

Function `CObject::DeliverImpulse` for the cue-ball object
gets called from `CObjectManager::Shoot`, which is called
from `CGame::KeyboardHandler`
in response to the player pressing the space bar when all balls are stopped
and are not in pockets. Rather than messing around with forces, this function
takes an angle \f$a\f$ and a magnitude `m` and sets the velocity of the
ball to `m` times the vector with orientation `a`.
The latter is obtained by calling
<a href="../sage/_sage_geometry_8h.html#a8326e6cd74f9907292a207381f7e8b6f">`Sage::AngleToVector(a)`</a>.
`CObjectManager` keeps the current cue orientation in `CObjectManager::m_fCueAngle`
which it provides as parameter `a` to `CObject::DeliverImpulse`.
`CObjectManager::m_fCueAngle` is adjusted using `CObjectManager::AdjustCueBall`,
which is called from `CGame::KeyboardHandler` in response to player
input (see \ref section2 "Section 2").

\anchor section5-2
## 5.2 %CObjectManager
 
`CObjectManager`'s most important task in this game is collision detection
and response. `CObjectManager::BroadPhase` is called once per frame
and it handles the detection of and response to collisions
between the balls and other balls, the rails (the horizontal and vertical
walls near the edges of the table in \ref fig1 "Fig. 1"),
and the pockets.
`CObjectManager::BroadPhase` calls `CObjectManager::NarrowPhase` which
performs collision detection and response between the two balls.
`CObjectManager::BroadPhase` also calls `CObjectManager::RailCollide`
for detection of and response to collision between
a ball and a rail, and `CObjectManager::PocketCollide`
for detection of and response to collision between
a ball and a pocket. These are covered in
\ref section5-2-1 "Section 5.2.1",
\ref section5-2-2 "Section 5.2.2", and
\ref section5-2-3 "Section 5.2.3", respectively.

\anchor section5-2-1
### 5.2.1 %CObjectManager::NarrowPhase

Suppose we call the balls that are colliding \f$B_1\f$ and \f$B_2\f$, and
that they are moving with velocities \f$\vec{v}_1\f$ and \f$\vec{v}_2\f$,
respectively. Let \f$\vec{v}\f$ be the velocity of \f$B_2\f$ relative to
\f$B_1\f$, that is \f$\vec{v} = \vec{v}_2 - \vec{v}_1\f$. Suppose that at
the end of the frame we detect an overlap between \f$B_1\f$ and \f$B_2\f$,
and that this is the first frame in which an overlap occurs between
\f$B_1\f$ and \f$B_2\f$. In the \ref fig8 "Fig. 8" \f$B_1\f$ is brown, \f$B_2\f$
is yellow, and \f$B_2\f$ is moving along the dotted line with velocity
\f$\vec{v}\f$ relative to \f$B_1\f$. Note that at the time this overlap
between the balls has been detected, \f$B_2\f$ may be approaching or moving
away from \f$B_1\f$ (we have drawn it as moving away).  

\anchor fig8
@image html circles3.png "Fig. 8. Ball to ball collision." width=35%

The actual time of impact (TOI for short) between \f$B_1\f$ and \f$B_2\f$
would probably be between animation frames. We would expect that the
position of \f$B_2\f$ at the TOI would be the dotted circle
in \ref fig8 "Fig. 8". We need to calculate \f$d\f$, the distance that
\f$B_2\f$ needs to be moved back to its position at TOI.
Let \f$\vec{c}\f$ be the vector fom the center of \f$B_2\f$ to the center
of \f$B_1\f$, \f$\delta\f$ be the distance between the center of \f$B_1\f$
and the center of \f$B_2\f$ at TOI, and \f$\theta\f$ be the angle between
\f$\vec{c}\f$ and \f$-\vec{v}\f$, as shown in \ref fig8 "Fig. 8".
By the law of cosines, 
\f[\delta^2 = d^2 + \left\Vert\vec{c}\right\Vert^2 -
2d\left\Vert\vec{c}\right\Vert \cos \theta.\f]
Since \f$\left\Vert\vec{c}\right\Vert = -\hat{v} \cdot \vec{c}\f$
and \f$\left\Vert\vec{c}\right\Vert^2 = \vec{c} \cdot \vec{c}\f$,
\f[
d^2 + \vec{c} \cdot \vec{c} +
2d\hat{v} \cdot \vec{c} - \delta^2 = 0.
\f]
This is a quadratic equation in \f$d\f$ whose roots are
\f[d = -\hat{v} \cdot \vec{c} \pm \sqrt{(\hat{v} \cdot \vec{c})^2 - 
\vec{c} \cdot \vec{c} + \delta^2}.\f]
We need the first root
\f[d = -\hat{v} \cdot \vec{c} + \sqrt{(\hat{v} \cdot \vec{c})^2 - 
\vec{c} \cdot \vec{c} + \delta^2}.\f]
Note that if \f$(\hat{v} \cdot \vec{c})^2 - 
\vec{c} \cdot \vec{c} + \delta^2 < 0 \f$, then there is no collision.
This should not happen if we perform this computation only if there is
overlap between the two circles, but it may still happen due to floating point
roundoff error. 

Now we can compute \f$\delta_t = \left\Vert\vec{v}\right\Vert/d\f$,
the time elapsed since TOI.
Suppose that at the time the collision was detected \f$B_1\f$ was at
position \f$\vec{p}_1\f$ and \f$B_2\f$ was at position \f$\vec{p}_2\f$.
Let \f$\vec{q}_1\f$ be the position of \f$B_1\f$ at TOI, and
\f$\vec{q}_2\f$ the position of \f$B_2\f$ at TOI. Then, we can
compute \f$\vec{q}_1 = \vec{p}_1 - \delta_t\vec{v}_1\f$ and
\f$\vec{q}_2 = \vec{p}_2 - \delta_t\vec{v}_2\f$.

Now we need to compute the velocities of \f$B_1\f$ and \f$B_2\f$ after the
impact. Let \f$\vec{n}\f$ be the vector from \f$\vec{q}_2\f$ to 
\f$\vec{q}_1\f$, that is, \f$\vec{n} = \vec{q}_1 - \vec{q}_2\f$.
At TOI \f$B_1\f$ and \f$B_2\f$ swap the components of their
velocity parallel to \f$\vec{n}\f$,
by the Laws of Conservation of Kinetic Energy and Conservation
of Momentum (see <a href="../newton/index.html#section1">here for details</a>).

Let
\f${\vec{v}_1}'\f$ and \f${\vec{v}_2}'\f$  be the velocities of \f$B_1\f$
and \f$B_2\f$, respectively, after the impact. Then
\f${\vec{v}_1}' = \vec{v}_1 + (\vec{v} \cdot \hat{n})\hat{n}\f$ and 
\f${\vec{v}_2}' = \vec{v}_2 - (\vec{v} \cdot \hat{n})\hat{n}\f$.
\f$B_1\f$ and \f$B_2\f$ will have been moving from their positions at
TOI with those respective new velocities for time \f$\delta_t\f$.
Their new positions are therefore \f$\vec{q}_1 + \delta_t {\vec{v}_1}\f$
and \f$\vec{q}_2 + \delta_t {\vec{v}_2}\f$, respectively.

\anchor section5-2-2
### 5.2.2 %CObjectManager::RailCollide

Collision of a ball with a line is easier if we consider only horizontal
and vertical lines. Fortunately, the rails in the Pool End Game are
horizontal and vertical. Consider the case of a ball colliding with a
horizontal line from below. Again, the actual collision occurs between
frames and overlap between the ball and the line might be detected
at the end of a frame.
Suppose that, as show in \ref fig9 "Fig. 9", the yellow ball is
moving along the dotted line from bottom left to top right
of the figure at velocity \f$\vec{v} = [v_x, v_y]\f$
and the collision is detected when it is at position \f$\vec{p} = [p_x, p_y]\f$.
Further suppose that the horizontal line has equation \f$y = w_y\f$.
We want to compute the point of impact (POI for short) so that, for example,
we can play a particle effect or sound effect at POI. 
From \ref fig9 "Fig. 9", the POI has coordinates
\f$[p_x - d_1 - d_2, w_y]\f$.
 
\anchor fig9
@image html wall.png "Fig. 9: POI of ball colliding with horizontal line from below." width=40%

Consider the upper right triangle in \ref fig9 "Fig. 9". By observation,
\f$\tan \theta = (p_y - w_y)/d_2\f$. However, \f$\tan \theta\f$ is
also equal to \f$v_y/v_x\f$. Therefore, \f$v_y/v_x = (p_y - w_y)/d_2\f$,
that is, \f$d_2 = (p_y - w_y)v_x/v_y\f$.
Now consider the lower left triangle in \ref fig9 "Fig. 9". By observation,
\f$\tan \theta = r/d_1\f$, where \f$r\f$ is the radius of the ball.
Therefore, \f$v_y/v_x = r/d_1\f$, that is, \f$d_1 = rv_x/v_y\f$.
Putting these things together, the coordinates of the POI
are \f$[p_x - (r + p_y - w_y)v_x/v_y, w_y]\f$.

Now consider \ref fig10 "Fig. 10". The gray circle is the position of
the ball when the collision is detected, the dotted circle is its
position at TOI, and the yellow circle is its corrected position at the
end of the frame. The ball will have moved downwards a distance
equal to its upward travel from TOI, that is \f$p_y - w_y + r\f$.
The ball's corrected position is therefore
\f$\vec{p}' = [p_x, 2(w_y - r) - p_y]\f$.
Similarly, the component of its velocity perpendicular to the line
gets reversed, so its corrected velocity at the end of the frame
is \f$[v_x, -v_y]\f$.

\anchor fig10
@image html wall2.png "Fig. 10: New position and velocity of ball colliding with horizontal line from below." width=40%

This concludes collision of a ball with a horizontal line from below.
The other three cases needed for this game,
collision of a ball with a horizontal line from above (the bottom rail),
collision of a ball with a vertical line from the left (the right rail),
and
collision of a ball with a vertical line from the right (the left rail),
are similar. See the code for `CObjectManager::RailCollide` for more details.

\anchor section5-2-3
### 5.2.3 %CObjectManager::PocketCollide

Collision of a ball with a pocket is fairly easy. For example, if a ball
collides with the top and right rails, then it is deemed to have fallen into
the pocket at the top right of the table. While this is much simpler than
the behavior of a ball in a real world game of pool, it is sufficient for
this game.

\anchor section6
# 6. What Next?

Next, take a look at the <a href="../shapes/index.html">Shapes Library</a>.

**/

