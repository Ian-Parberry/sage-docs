/**
\mainpage notitle

\anchor section1
# 1. Introduction

This project consists of a collection of basic shapes that can be collided.
It's not intended to be a full collision module, but it will give
you a sense of some of the math and physics used in collision detection and response.
It's implemented as a separate project that compiles to a library file
that is linked into the
[Collision Math Toy](../collisionmath/index.html) and the
[Pinball Game](../pinball/index.html). 
Note that unlike the code in the 
[Pool End Game](../pool/index.html), the collision detection
and response code here does not compute exact responses, but instead computes
an approximation using faster methods. 
As a result, tunneling and overlap may occur.

The remainder of this page is divided into five sections.
\ref section2 "Section 2" lists the controls
and their corresponding actions,
\ref section3 "Section 3" tells you how to build it,
\ref section4 "Section 4" gives you a list of actions to take in the game to see some of its
important features,
\ref section5 "Section 5" gives a breakdown of the code,
and
\ref section6 "Section 6" addresses the question "what next?".

\anchor section2
# 2. Keyboard Controls

This project compiles into a library, so there are no keyboard
controls here.

\anchor section3
# 3. Building the Library

This code uses the DirectX12 Toolkit.
Make sure that you have followed the
instructions in
<a href="../install/index.html#directxtk12">Section 3</a> of the
<a href="../install/index.html">SAGE Installation Instructions</a>.
Note that this project is independent of <a href="../sage/index.html">SAGE</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`2. Shapes Library`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Shapes.sln`</span>
 with Visual Studio and build the Release and Debug configurations.
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

There's no executable file to run here, remember, it just compiles into a library file. If you're interested, the library files are
<span style="background-color:#D8E4D8;">`x64\Release\Shapes.lib`</span>
and <span style="background-color:#D8E4D8;">`x64\Debug\Shapes.lib`</span>.

\anchor section5
# 5. Code Breakdown

All of the code in this library is in a namespace called `Shapes`.

\anchor section5-1
## 5.1 Helper Functions

`ShapeMath.h` and `ShapeMath.cpp` contain some handy helper functions
for this project. Since this project is independent of <a href="../sage/index.html">SAGE</a>, some <a href="../sage/index.html">SAGE</a> functions are duplicated here. Of particular interest is `FailIf`,
which will be used inside functions in this project to test a Boolean condition and bail out from the function returning `false` if the condition is `true`.

    #define FailIf(x) if(x)return false; 

This will make our code easier to read when we have multiple failure points
within a function.

\anchor section5-2
## 5.2 Axially Aligned Bounding Boxes

\anchor fig1
\image html aabb.png "Fig. 1: AABBs (green) for a circle and an arc." width=25%

An _axially aligned bounding box_ (AABB for short) is a minimal-size
rectanle that bounds a shape
and has its edges parallel to the X and Y axes.
For example, \ref fig1 "Fig. 1" shows the AABB for a circle and an arc.
AABBs are used in narrow phase collision detection to quickly and efficiently
reject things that are too far apart to collide.
Our AABBs are implemented by a class `Shapes::CAabb2D`,
which has two private member variables of type `Vector2`,
`Shapes::CAabb2D::vTopLeft` and `Shapes::CAabb2D::vBottomRt` which store
the coordinates of
its top left and bottom right corners as shown in \ref fig2 "Fig. 2".

\anchor fig2
\image html corners.png "Fig. 2: An AABB is defined by its top left and bottom right corners." width=40%

\anchor section5-2-1
### 5.2.1 Building AABBs

AABBs can be built by creating one that encloses a single point
using the overloaded assignment operator `Shapes::CAabb2D::operator=()`,
and expanding them to include a new point using `Shapes::CAabb2D::operator+=()`.

\anchor section5-2-2
### 5.2.2 AABB Intersection Tests

There are two intersection tests involving AABBs which are implemented
by overriding `Shapes::operator&&`. The first one returns `true` if two AABBs have
non-empty intersection:
<a href="_a_a_b_b_8h.html#ae71c3550e2d92b21fd23bc51c34bf4d0">
`bool operator&&(const CAabb2D&, const CAabb2D&)`</a>.
The best way to think about this is to consider how this function fails,
that is, how two AABBs don't intersect. Suppose we have two AABBs \f$A\f$ and
\f$B\f$, and that 
\f$A\f$ has top left corner \f$[a_l, a_t]\f$
and bottom right corner \f$[a_r,a_b]\f$ and
\f$B\f$ has top left corner \f$[b_l, b_t]\f$
and bottom right corner \f$[b_r,b_b]\f$.
One way that \f$A\f$ and \f$B\f$ can be drawn without overlap
is for \f$A\f$ to be completely to the left of \f$B\f$, as shown in
\ref fig3 "Fig. 3", in which case
\f$a_r < b_l\f$.

\anchor fig3
\image html aabbintersect.png "Fig. 3: AABB intersection test." width=25%

Similarly, \f$A\f$ could be completely to the right of \f$B\f$, 
in which case \f$a_l > b_r\f$;
\f$A\f$ could be completely above \f$B\f$, 
in which case \f$a_b > b_t\f$; or
\f$A\f$ could be completely below \f$B\f$, 
in which case \f$a_t < b_b\f$.
These are the only ways that \f$A\f$ can not overlap \f$B\f$.
Therefore \f$A\f$ and \f$B\f$ don't intersect iff
\f[
(a_r < b_l) \vee (a_l > b_r) \vee (a_b > b_t) \vee (a_t < b_b),
\f]

That is, using <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws">De Morgan's Law</a>,
\f$A\f$ and \f$B\f$ _do_ intersect iff
\f[
(a_r \geq b_l) \wedge (a_l \leq b_r) \wedge (a_b \leq b_t) \wedge (a_t \geq b_b).
\f]

This AABB intersection test is therefore extremely fast, using at most
four floating point comparisons and three logical operations.

The second AABB intersection test returns `true` if a point is inside an AABB:
<a href="_a_a_b_b_8h.html#a1f0ed51adcd95498db5fe30237772fc1">
`bool operator&&(const CAabb2D&, const Vector2&)`</a>.
Suppose the AABB has top left point \f$[u_x, u_y]\f$,
bottom right point \f$[v_x, v_y]\f$, and the point to be
tested for intersection with it is \f$\vec{p} = [p_x, p_y]\f$,
as shown in \ref fig4 "Fig. 4".

\anchor fig4
\image html ptinaabb.png "Fig. 4: Point in AABB test." width=20%

Then \f$\vec{p}\f$ is inside the bounding box iff
\f[
(u_x \leq p_x) \wedge (p_x \leq v_x) \wedge (v_y \leq p_y) \wedge (p_y \leq u_y)
\f]

The point-in-AABB intersection test is also extremely fast, using at most
four floating point comparisons and three logical operations.

\anchor section5-3
## 5.3 Shape and Motion Types

The Shapes library has four main shapes: 
point, line segment, circle, and arc.
There is also a line shape for internal use only.
Shape types are identified using `Shapes::eShape`, defined in `Shape.h`.
It also has three motion types,
static, kinematic, and dynamic.

1. Static shapes neither move nor rotate and are not affected by collisions.
2. Kinematic shapes do not move but can rotate about a static point. They are not affected by collisions.
3. Dynamic shapes (currently only circles) can move and rotate fully and are affected by collisions.

Motion types are identified using `Shapes::eMotion`, also defined in `Shape.h`.

\anchor section5-4
## 5.4 Basic Shapes

`Shapes::CShapeCommon` contains values common to all shapes.
`Shapes::CShapeDesc` is a shape descriptor.
`Shapes::CShape` is the base class for all shapes, from which the static shapes
`Shapes::CPoint` (see \ref section5-7 "Section 5.7"),
`Shapes::CLineSeg` (see \ref section5-8 "Section 5.8"),
`Shapes::CCircle` (see \ref section5-9 "Section 5.9"), and
`Shapes::CArc` (see \ref section5-10 "Section 5.10") are derived.

`Shapes::CShape` has various protected member variables relating to shapes.
Of particular interest are the following.

`Shapes::CShape::m_eMotionType`, which
is initialized to `Shapes::eMotion::Static`,
so that the shapes described in \ref section5-7 "Section 5.7"
through \ref section5-10 "Section 5.10" will be static shapes by default.
`Shapes::CShape::m_eMotionType` will be changes to `Shapes::eMotion::Kinematic`
in the constructors of kinematic shapes (see \ref  section5-11 "Section 5.11")
and to `Shapes::eMotion::Dynamic`
in the constructors of dynamic shapes (see \ref  section5-12 "Section 5.12").

`Shapes::CShape::m_fElasticity` is the "bounciness" of a collision,
with `1.0f` means a perfectly elastic collision, `0.5f` means a collision
in which half the velocities are lost in a collision,
and values greater than `1.0f` mean that a collision
imparts extra velocity to the object that it collides with, 
perhaps by mechanical or electromechanical means, such as a
bumper in a pinball machine.

`Shapes::CShape::m_bIsSensor`. If this is set to `true` then
the shape does not react and does not cause any colliding object
to react to a collision with it. This can be used, for example,
as a switch to light up lights in a pinball machine.

`Shapes::CShape::m_bCanCollide` is usually set to `true`, meaning that the shape
can collide with other shapes. Setting it to `false` will temporarily
turn off collisions until it is set to `true` again.
This can be used, for example, for a post that sometimes retracts
below the surface in a pinball machine.

`Shapes::CShape::m_pUser` is a user pointer (that is, a pointer for the use of the programmer) whose aplication will be seen in the <a href="../collisionmath/index.html">Collision Math Toy</a>
and the <a href="../pinball/index.html">Pinball Machine</a>.

\anchor section5-5
## 5.5 Collision Detection and Response

Shapes that can collide with other shapes will have a `CollisionDetected` function that
takes a reference to an instance of 
the contact descriptor `Shapes::CContactDesc` that has been initialized with a pointer to
the current shape `m_pShape` and a pointer to the dynamic shape (currently only
dynamic circles are implemented) `m_pCircle`.
If the two shapes overlap, `CollisionDetected` will
fill in the other member variables of the contact descriptor as follows and return `true`.
The point of intersection (the coordinates of the point at which the shapes first collided,
which is usually between frames)
is computed in the 2D vector `m_vPOI`, the collision normal is computed in `m_vNorm`,
the setback distance (the distance that the dynamic shape must be moved back
along the collision normal to its position at the time of impact)
is computed in `m_fSetback`, and the collision speed is computed in `m_fSpeed`.
The main difference between collision detection and response in this
project as opposed to the previous one
(<a href="../pool/index.html">The 8-ball Pool End Game</a>)
is that here the POI will be approximated by the closest point on the shape to the center of the dynamic circle. This is an outrageous fudge, but it looks right in practice
and is faster to compute than the alternative.

Shape classes will have various intersection functions that detect overlap with other shapes.
Dynamic shapes (the only shapes that can currently react to a collision)
They will have a `CollisionResponse` function that takes as parameter a constant reference
to a contact descriptor provided by some call to a `CollisionDetected` function.

\anchor section5-6
## 5.6 Lines

Infinite lines are implemented as class `Shapes::CLine`, which is for internal use only,
that is, for computations internal to the Shapes library.
For this reason, `Shapes::CLine` has no `CollisionDetected` or `CollisionResponse`
functions, neither does it have any functions to do with updating any
member variables, translation, or rotation.
It is the only shape that does not have a descriptor and is not derived from `Shapes::CShape`.
`Shapes::CLine` stores a gradient \f$m\f$, inverse gradient \f$1/m\f$,
\f$x\f$-intercept \f$c\f$, and
\f$y\f$-intercept \f$b\f$.
A vertical line has gradient \f$m = \infty\f$ (implemented as `float::Inf`),
\f$1/m = 0\f$, and \f$b = \infty\f$.
A horizontal line has gradient \f$m = 0\f$,
\f$1/m = \infty\f$, and \f$c = \infty\f$.

\anchor section5-6-1
### 5.6.1 The Line Constructor

The `Shapes::CLine` constructor takes two parameters, a point \f$\vec{p}\f$ and
a floating point gradient \f$m\f$, and initializes its member variables
to represent the line of gradient \f$m\f$ through point \f$\vec{p}=[p_x, p_y]\f$.
That is, its gradient is  \f$m\f$, its inverse gradient \f$1/m\f$,
its \f$y\f$-intercept is \f$p_y - p_xm\f$, and its \f$x\f$-intercept is \f$p_x - p_y/m\f$.

\anchor section5-6-2
### 5.6.2 Point of Intersection of Two Lines

`Shapes::CLine::Intersect` computes the point of intersection between two lines.
If both lines have the same gradient, then there is no point of intersection
and the function returns `Vector2(Inf, Inf)`.
Otherwise, if neither lines are vertical,
and the lines have equations \f$y=m_0x + c_0\f$ and \f$y=m_1x+c_1\f$
as shown in \ref fig5 "Fig. 5", then the
\f$x\f$-coordinate of the point of intersection of the lines satisfies the equation
\f$m_0p_x + c_0 = m_1p_x+c_1\f$, that is, \f$p_x = (c_1 - c_0)/(m_0 - m_1)\f$.
The \f$y\f$-coordinate of the point of intersection is therefore
\f$p_y = m_0p_x + c_0 = m_0(c_1 - c_0)/(m_0 - m_1) + c_0\f$.

\anchor fig5
\image html lineline1.png "Fig. 5: Intersection of two nonvertical lines." width=30%

Otherwise, one of the lines is vertical and the other is not.
Suppose the first line is vertical and has equation \f$x = c_0\f$,
and that the second line has equation \f$y=m_1x+c_1\f$.
Let the point of intersection \f$\vec{p}\f$ have coordinates \f$[p_x, p_y]\f$
as shown in \ref fig6 "Fig. 6".

\anchor fig6
\image html lineline2.png "Fig. 6: Intersection of a line with a vertical line." width=30%

Then \f$p_x = c_0\f$ since \f$\vec{p} = [p_x, p_y]\f$ is on the vertical line \f$x = c_0\f$.
Therefore \f$p_y = m_1 c_0 + c_1\f$ since \f$\vec{p}\f$ is on the line \f$y=m_1x+c_1\f$.
The case where the second line is vertical and the first line is not vertical is similar.

\anchor section5-6-2
### 5.6.2 Point on Line Closest to Another Point

\anchor fig7
\image html lineclosestpt0.png "Fig. 7: Gradient of perpendicular line." width=40%

Let \f$\triangle ABC\f$ be the triangle shown in \ref fig7 "Fig. 7",
where \f$\overline{AB}\f$ has equation \f$y=m_0x + c_0\f$,
where \f$\overline{BC}\f$ has equation \f$y=m_1x + c_1\f$,
and \f$\overline{AC}\f$ lies along the positive \f$X\f$-axis.
Let \f$\theta = \angle BAC\f$.
Drop a line perpendicular from \f$B\f$ down to a point \f$D\f$ the \f$X\f$-axis
(shown in blue in \ref fig7 "Fig. 8"). Then, \f$\tan \theta = d_y/d_x\f$ (also
shown in blue), that is,
rise over run, and so \f$m_0 = \tan \theta\f$.
Notice that \f$\angle BAC = 90^\circ - \theta\f$ (shown in green in \ref fig7 "Fig. 7").
Therefore, the angle from the positive \f$X\f$-axis to \f$\overline{BC}\f$ is
\f$90^\circ - \theta\f$ (shown in red in \ref fig7 "Fig. 7").
Since \f$\overline{AB}\f$ has equation \f$y=m_0x + c_0\f$, by an argument similar to the above,
\f$m_1 = \tan 90^\circ + \theta\f$.
Therefore,
\f[
m_1 = \tan (90^\circ + \theta)
= \frac{\sin (90^\circ + \theta)}{\cos (90^\circ + \theta)}
=- \frac{\cos \theta}{\sin \theta}
=\frac{-1}{\tan \theta}
=\frac{-1}{m_0}.
\f]

Therefore, as shown in \ref fig8 "Fig. 8" the closest point on a line \f$L_0\f$
with gradient \f$m\f$ to a point \f$\vec{p}\f$
can be found by computing the point of intersection of the line \f$L_0\f$
with the line \f$L_1\f$ with gradient \f$-1/m\f$ through point \f$p\f$.
\f$L_1\f$ is constructed using the `Shapes::CLine` constructor
(see \ref section5-6-1 "Section 5.6.1")
and its point of intersection with \f$L_0\f$ is computed using \f$L_0\f$'s
`Shapes::CLine::Intersect` function (see \ref section5-6-2 "Section 5.6.2").

\anchor fig8
\image html lineclosestpt1.png "Fig. 8: Point on line closest to a point." width=28%

\anchor section5-7
## 5.7 Points

Points are implemented as class `Shapes::CPoint`, derived from `Shapes::CShape`.
They are instantiated using the descriptor `Shapes::CPointDesc`.
`Shapes::CPoint` has, in addition to constructors, a collision detection
function `Shapes::CPoint::CollisionDetected` which, as noted in
\ref section5-5 "Section 5.5",
takes as parameter a reference to an instance of `Shapes::CContactDesc`
initialized with a pointer to a dynamic circle and fills in the POI, collision normal, and
setback distance.

\anchor fig9
\image html point0.png "Fig. 9: A slowly moving circle colliding with a point (left) and the POI, impact normal, and setback distance (right)." width=40%

If we assume that the circle and the point are moving relatively slowly, then
the point will be only a short distance in from the edge of the circle
when the collision is detected, as shown in \ref fig9 "Fig. 9", left.
In that figure the circle (in green) has radius \f$r\f$ and center point \f$\vec{p}_1\f$ (blue)
and it is moving at velocity \f$\vec{v}\f$ rightwards and slightly down (purple)
towards point \f$\vec{p}_0\f$ (red).
`Shapes::CPoint::CollisionDetected` computes \f$\vec{p} = \vec{p}_1 - \vec{p}_0\f$,
the vector from \f$\vec{p}_0\f$ to \f$\vec{p}_1\f$.
A collision is detected when \f$||\vec{p}|| < r\f$.
The POI is taken to be the coordinates of \f$\vec{p}_0\f$ at the time the collision
is detected, the setback distance is taken to be \f$r - || \vec{p} ||\f$,
the collision normal is taken to be \f$\hat{p}\f$,
 and the collision speed is \f$||\vec{p}_0 ||\f$.
These are mostly not the correct values but, as we will see later
in the <a href="../collisionmath/index.html">Collision Math Toy</a> and the
<a href="../pinball/index.html">Pinball Game</a>, are usually close enough.

\anchor fig10
\image html point1.png "Fig. 10: Two instances of a fast moving circle colliding with a point." width=40%

However, if our assumption that the circle and the point are moving relatively slowly is incorrect, then there are a number of things that can go wrong. For example, the circle could
completely travel through the point without a collision being detected
(tunneling), or it could travel almost competely through the point as shown in
\ref fig10 "Fig. 10", left (in which case the circle will be reflected in the wrong direction),
or \f$\vec{p}_0\f$ could be very close to or equal to \f$\vec{p}_1\f$ as shown in
\ref fig10 "Fig. 10", right (in which case we may get a divide-by-zero).

\anchor section5-8
## 5.8 Line Segments

\anchor fig11
\image html lineseg.png "Fig. 11: Line segment." width=28%

Line segments are implemented as class `Shapes::CLineSeg`, derived from `Shapes::CShape`
and `Shapes::CLine` (see \ref section5-6 "Section 5.6").
They are instantiated using the descriptor `Shapes::CLineSegDesc`.
`Shapes::CLineSeg` stores, in addition to inherited values, the
coordinates of the end points
\f$\vec{p}_0\f$ and \f$\vec{p}_1\f$, the corresponding tangent vectors 
\f$\hat{t}_0\f$ and \f$\hat{t}_1\f$,
and the counterclockwise normal \f$\hat{n}\f$ from \f$\vec{p}_0\f$,
noting that we will always enforce the condition that \f$\vec{p}_0\f$
will always be to the left of, or at the same \f$X\f$-coordinate as \f$\vec{p}_1\f$
as shown in \ref fig11 "Fig. 11".
Note that \f$\hat{t}_0 = - \hat{t}_1\f$
and \f$\hat{t}_0 \cdot \hat{n} = \hat{t}_1 \cdot \hat{n} = 0\f$.

`Shapes::CLineSeg` has, in addition to constructors and reader functions, a collision detection
function `Shapes::CLineSeg::CollisionDetected` which, as noted in
\ref section5-5 "Section 5.5",
takes as parameter a reference to an instance of `Shapes::CContactDesc`
initialized with a pointer to a dynamic circle and fills in the POI, collision normal, and
setback distance.
`Shapes::CLineSeg::CollisionDetected` rejects collisions with dynamic circles
that approach from the ends of the line segment, that is, if the circle center is \f$\vec{p}_2\f$,
either \f$(\vec{p}_2 - \vec{p}_0)\cdot \hat{t}_0 < 0\f$
or \f$(\vec{p}_2 - \vec{p}_1)\cdot \hat{t}_1 < 0\f$,
as shown in \ref fig12 "Fig.12".

\anchor fig12
\image html linesegmiss.png "Fig. 12: Rejected collisions of dynamic circle with line segment." width=28%

Otherwise \f$(\vec{p}_2 - \vec{p}_0)\cdot \hat{t}_0 \geq 0\f$
and \f$(\vec{p}_2 - \vec{p}_1)\cdot \hat{t}_1 \geq 0\f$,
in which case we take the POI to be the closest point
on the line segment to \f$p_2\f$,
as shown in \ref fig13 "Fig.13",
using a call to `Shapes::CLine::ClosestPt`.
We then foist the rest of the work to `Shapes::CPoint`, as follows.

    return CPoint(CPointDesc(ClosestPt(p2))).CollisionDetected(c);

where `c` is the contact descriptor for this collision.

\anchor fig13
\image html lineseghit.png "Fig. 13: Accepted collision of dynamic circle with line segment." width=28%

\anchor section5-9
## 5.9 Circles

Circles are implemented as class `Shapes::CCircle`, derived from `Shapes::CShape`.
They are instantiated using the descriptor `Shapes::CCircleDesc`.
`Shapes::CCircle` stores, in addition to inherited values, its
radius `m_fRadius` and the square of the radius `m_fRadiusSq`,
the purpose of which will become clear in \ref section5-9-1 "Section 5.9.1".
It also has some useful public member functions, including
`Shapes::CCircle::PtInCircle` test, a `Shapes::CCircle::ClosestPt` function
`Shapes::CCircle` also has a collision detection
function `Shapes::CCircle::CollisionDetected` which, as noted in
\ref section5-5 "Section 5.5",
takes as parameter a reference to an instance of `Shapes::CContactDesc`
initialized with a pointer to a dynamic circle and fills in the POI, collision normal, and
setback distance.

\anchor section5-9-1
### 5.9.1 Point in Circle Test

`Shapes::CCircle::PtInCircle`
checks whether a point \f$\vec{p}_1=[x_1, y_1]\f$ is inside the circle by
checking whether the distance from \f$\vec{p}_1\f$ to the center of the circle
\f$\vec{p}_0=[x_0,y_0]\f$ is less than the radius \f$r\f$. That is, whether
\f[
\sqrt{(x_0 - x_1)^2 + (y_0 - y_1)^2} < r.
\f]
To save doing the potentially costly square-root, we test instead whether
\f[
(x_0 - x_1)^2 + (y_0 - y_1)^2 < r^2,
\f]
noting that the radius squared is computed and stored in `m_fRadiusSq` in the constructor,
and that
`DirectX::SimpleMath::Vector2` has a function `LengthSquared` to compute the square
of its length.


\anchor section5-9-2
### 5.9.2 Closest Point on Perimeter

\anchor fig14
\image html closestptoncirc.png "Fig. 14: Point on perimeter closest to a point." width=25%

`Shapes::CCircle::ClosestPt` finds the closest point on the perimeter to the point \f$\vec{p}\f$
as follows. Suppose the center of the circle is \f$\vec{p}_0\f$. Compute
\f$\vec{n} = \vec{p}_0 - \vec{p}\f$, the vector from \f$\vec{p}_0\f$ to \f$\vec{p}\f$,
and normalize it to get \f$\hat{n}\f$. Then the point on the perimeter
closest to \f$\vec{p}\f$ is \f$\vec{p}_0 + r\hat{n}\f$,
as shown in \ref fig14 "Fig. 14".

\anchor section5-9-3
### 5.9.3 Tangents Through a Point

\anchor fig15
\image html tangent0.png "Fig. 15: Points of intersection on tangent through a point." width=25%

`Shapes::CCircle::Tangents(const Vector2&, Vector2&, Vector2&)`
finds the intersection points \f$\vec{p}_0, \vec{p}_1\f$ of the
tangents to a
circle of radius \f$r\f$ and center \f$\vec{u}\f$ through an exterior point \f$\vec{p}\f$.
Let \f$\vec{v} = \vec{u} - \vec{p}\f$ be the vector from \f$\vec{p}\f$ to \f$\vec{u}\f$.
Let \f$\hat{v_0}\f$ be the
unit vector that points along the tangent from \f$\vec{p}\f$ to \f$\vec{p}_0\f$ and
let \f$\hat{v_1}\f$ be the
unit vector that points along the tangent from \f$\vec{p}\f$ to \f$\vec{p}_1\f$.
This is depicted in \ref fig15 "Fig.15".

\anchor fig16
\image html tangent1.png "Fig. 16: First point of intersection on tangent through a point." width=30%

Consider the first of these points \f$\vec{p}_0\f$.
Consider the triangle with vertices \f$\vec{p}\f$, \f$\vec{p}_0\f$, and \f$\vec{u}\f$
as shown in \ref fig16 "Fig. 16".
The length of the hypotenuse \f$d\f$ is equal to the length of the vector \f$\vec{v}\f$
from \f$\vec{p}\f$ to \f$\vec{u}\f$, that is, \f$d = ||\vec{u} - \vec{p}||\f$.
Let \f$\delta\f$ be the length of the tangent through \f$\vec{p}\f$ and \f$\vec{p}_0\f$.
Since the triangle is a right triangle, we know by the Pythagorean Theorem that
\f$\delta^2 + r^2 = d^2\f$, that is, \f$\delta = d^2 - r^2\f$.
Also since the triangle is a right triangle, the tan of the angle \f$\theta\f$
shown in blue in \ref fig16 "Fig.16" is \f$r/\delta\f$, and therefore
\f$\theta = \arctan (r/\delta)\f$.
The angle between the positive \f$X\f$-axis and the line between \f$\vec{p}\f$
and \f$\vec{u}\f$ is \f$\phi = \arctan(v_y/v_x)\f$, shown in green in \ref fig16 "Fig.16".
Therefore, the angle between the positive \f$X\f$-axis
and the tangent is \f$\theta + \phi\f$, and
\f$\hat{v_0} = [\cos(\theta + \phi), \sin(\theta + \phi)]\f$.
Then to get from point \f$\vec{p}\f$ to point \f$\vec{p}_0\f$ we need to go a
distance of \f$\delta\f$ in the direction of \f$\hat{v}_0\f$,
that is, \f$\vec{p}_0 = \vec{p} + \delta \hat{v}_0\f$.

\anchor fig17
\image html tangent2.png "Fig. 17: Second point of intersection on tangent through a point." width=30%

The computation of the second of these points \f$\vec{p}_1\f$ is similar to the above,
except that
\f$\hat{v_1} = [\cos(\theta - \phi), \sin(\theta - \phi)]\f$,
noting that in \ref fig17 "Fig. 17", \f$\theta\f$ is the positive
angle between \f$\vec{v}\f$ and \f$\hat{v}_1\f$ and
\f$\phi\f$ is the positive
angle between the \f$X\f$-axis and \f$\hat{v}_1\f$.

\anchor section5-9-4
### 5.9.4 Common Tangents

\anchor fig18
\image html commontangent.png "Fig. 18: Tangent common to two circles." width=75%

`Shapes::CCircle::Tangents(const CCircle*, CLineSegDesc&, CLineSegDesc&)`
computes the line segments
for the tangents to two circles of radius
\f$r_0\f$ and \f$r_1\f$, where \f$r_1 < r_0\f$, as shown in \ref fig18 "Fig. 18", left.
J. Casey, <em>A sequel to the First Six
Books of the Elements of Euclid</em>, pp. 31-32, 1888 notes that you can shrink
both circles by the same amount and maintain exactly the same tangents.
As observed in \ref fig18 "Fig. 18", right, you can shrink the smaller
(yellow) circle down to a single point while shrinking the larger (green)
circle down to radius \f$r_0 - r_1\f$.
This reduces the problem to that of finding the intersection points of
the tangents of a circle through an external point, which we can solve
using the method of \ref section5-9-3 "Section 5.9.3".

\anchor fig19
\image html commontangent2.png "Fig. 19: Intersection points of common tangents." width=35%

Suppose the points of intersection on the reduced large circle are \f$\vec{p}_0, \vec{p}_1\f$ and its
center is at position \f$\vec{u}\f$, as shown in \ref fig19 "Fig. 19".
Compute \f$\vec{n}_0 = \vec{p}_0 - \vec{u}\f$
and \f$\vec{n}_1 = \vec{p}_1 - \vec{u}\f$ and normalize them to get \f$\hat{n}_0\f$
and \f$\hat{n}_1\f$. Then the points of intersection of the common
tangents of the two circles are \f$\vec{q}_0 = \vec{p}_0 + r_1 \hat{n}_0\f$
\f$\vec{q}_1 = \vec{p}_1 + r_1 \hat{n}_1\f$ on the large circle and
\f$\vec{q}_2 = \vec{p} + r_1 \hat{n}_0\f$
\f$\vec{q}_3 = \vec{p} + r_1 \hat{n}_1\f$, again
as shown in \ref fig19 "Fig. 19".

\anchor section5-9-5
### 5.9.5 Collision Detection

As we did with line segments (see \ref section5-8 "Section 5.8"),
`Shapes::CCircle::CollisionDetected`
foists off the work of filling in the collision descriptor `c` to an instance
of `Shapes::CPoint` for the closest point on the dynamic circle to the center of
this circle, as follows.

    return CPoint(ClosestPt(c.m_pCircle->GetPos())).CollisionDetected(c);

As before, this is not the correct POI but we will see in later projects that it is close enough.

\anchor section5-10
## 5.10 Arcs

Arcs are implemented as class `Shapes::CArc`, derived from `Shapes::CCircle`
(see \ref section5-9 "Section 5.9").
They are instantiated using the descriptor `Shapes::CArcDesc`.

\anchor section5-10-1
### 5.10.1 Arc Descriptors

\anchor fig20
\image html arcdesc.png "Fig. 20: Arc angles, points, and tangents." width=35%

Arcs are defined by a pair of angles, for example, the angles \f$\alpha_0\f$
and \f$\alpha_1\f$ shown in \ref fig20 "Fig. 20". 
Note that at all times we will ensure that the stored values of these angles in 
`Shapes::CArcDesc` and `Shapes::CArc` always have the property that
\f$0 \leq \alpha_0, \alpha_1 < 2\pi\f$.
As shown in \ref fig20 "Fig. 20", we always store the coordinates of the end points
of the arc \f$\vec{p}_0\f$ and \f$\vec{p}_1\f$, respectively,
and the tangents to the arc at those points \f$\vec{t}_0\f$ and \f$\vec{t}_1\f$, respectively.
To facilitate consistency is maintained when we rotate an arc in `Shapes::CKinematicArc`,
the angles, points, and tangents will be stored in private member variables that are
updated together automatically using `Set` functions.
This is not formally allowed in our definition of a
<a href="../sage/index.html#sec2-2">Descriptor</a>,
but as Ralph Waldo Emerson once said, "Consistency is the bugbear of tiny minds."

\anchor fig21
\image html arcangles.png "Fig. 21: Angle size determines arc direction." width=35%

Note that our definition of arc so far is ambiguous: the arc could 
be either the smaller or larger portion of a circle.
Our code will adopt the convention that the arc is that part of the perimeter
of a circle that goes counterclockwise from \f$\vec{p}_0\f$
to \f$\vec{p}_1\f$.
Therefore, flipping the arc from one portion of a circle to its complement
means just swapping the angles and swapping and reversing the direction of the normals.
For example, in \ref fig21 "Fig. 21" (left) we have the case that \f$\alpha_0 < \alpha_1\f$,
while in \ref fig21 "Fig. 21" (right) \f$\alpha_0 > \alpha_1\f$.
For convenience, we will call the former an <em>acute</em> arc
and the latter an <em>obtuse</em> arc.

\anchor section5-10-2
### 5.10.2 Arc Update

\anchor fig22
\image html arcquad.png "Fig. 22: Arc AABBs." width=40%

Function `Shapes::CArc::Update` computes the arc's end points, tangents, and AABB
from its center point and angles. The trickiest of these is the AABB.
Consider the arc shown in \ref fig22 "Fig. 22", left.
Since none of what we will call <em>quadrant points</em>,
the four points on the extreme left, right, top, and bottom of the
circle containing the arc (shown in red),
then the AABB of the arc (shown in green) is just the smallest AABB that contains the
end points of the arc \f$\vec{p}_0\f$ and \f$\vec{p}_1\f$.
\ref fig22 "Fig. 22", right, shows three arcs that do overlap one or more
of the quadrant points. Clearly, their AABBs must be the smallest AABB that includes
their respective end points and whichever quadrant points lie on the arc.

\anchor section5-10-3
### 5.10.3 Point in Sector Test

\anchor fig23
\image html arcsector.png "Fig. 23: The sector of an arc is the light gray area extending out to infinity." width=30%

Function `Shapes::CArc::PtInSector` determines whether the coordinates
of a point \f$\vec{p}\f$ lie within the sector of the arc,
which depends on whether the arc is acute or obtuse
(refer back to \ref section5-10-1 "Section 5.10.1" for definitions).
It begins by finding the orientation \f$\alpha\f$ of the vector
from the center of the arc to \f$\vec{p}\f$.
Suppose the arc angles are \f$\alpha_0\f$ and \f$\alpha_1\f$.
If \f$\alpha_0 < \alpha_1\f$, then the arc is acute
and \f$\vec{p}\f$ is within the sector of the arc iff
\f$\alpha_0 \leq \alpha \leq \alpha_1\f$ (see \ref fig24 "Fig. 24").

\anchor fig24
\image html arcptinsector1.png "Fig. 24: Point in sector test for acute arcs." width=15%

Otherwise, the arc is obtuse and 
\f$\vec{p}\f$ is within the sector of the arc iff
\f$\alpha_0 \leq \alpha \f$ or
\f$\alpha \leq \alpha_1\f$ (see \ref fig25 "Fig. 25").

\anchor fig25
\image html arcptinsector2.png "Fig. 25: Point in sector test for obtuse arcs." width=35%

\anchor section5-10-4
### 5.10.4 Collision Detection

`Shapes::CArc::CollisionDetected` begins by rejecting the collision if the
dynamic circle comes from outside the arc sector or is inside the arc circle and
is approaching in the
direction opposite a tangent to the arc. This is to avoid overlap with the end
of the arc as much as possible.
Otherwise the POI is taken to be the point on the arc closest to the
center of the dynamic circle, and the 
work of filling in the collision descriptor `c` is once again foisted off to an instance
of `Shapes::CPoint` for the POI.

    return CPoint(ClosestPt(c.m_pCircle->GetPos())).CollisionDetected(c);

As before, this is not the correct POI but we will see in later projects that it is close enough.

\anchor section5-11
## 5.11 Kinematic Shapes

The Shapes Library includes the following kinematic shapes
`Shapes::CKinematicPoint`, `Shapes::CKinematicLineSeg`, `Shapes::CKinematicCircle`, and
`Shapes::CKinematicArc`.
Each kinematic shape is derived from the corresponding
static shape described in \ref section5-10 "Section 5.10" and inherits `Shapes::CShape::m_eMotionType`
which is set to `Shapes::eMotion::Kinematic` in the constructor.
Each kinematic shape has additional private
member variables in which the relevant constructor stores its initial
position and/or orientation at time of instantiation.

Every kinematic shape has a `Reset` function that resets its current position
and orientation to the initial ones and a `Rotate` function
that takes the coordinates of the center of rotation and an angle to be
added to the initial orientation to get the current orientation. 
`Shapes::CKinematicPoint::Rotate` and `Shapes::CKinematicCircle::Rotate`
both use a single call to
`Shapes::RotatePt` to rotate their positions.
`Shapes::CKinematicArc::Rotate` also changes the arc angle and calls
`Shapes::CArc::Update` as the last thing.
`Shapes::CKinematicLineSeg::Rotate` rotates its end points
(not its position), swaps the points if they are out of order,
recomputes the position and lastly calls `Shapes::CLineSeg::Update`.


\anchor section5-12
## 5.12 Dynamic Shapes

The only dynamic shapes implemented so far in the Shapes Library is
`Shapes::CDynamicCircle`, which is derived from `Shapes::CCircle`
and has its own descriptor `Shapes::CDynamicCircleDesc`.
It has private member variables `Shapes::CDynamicCircle::m_vVel`
for its velocity and `Shapes::CDynamicCircle::m_fMass` for its mass.
The most interesting part of `Shapes::CDynamicCircle` is its collision response
functions. Public member function `Shapes::CDynamicCircle::CollisionResponse`
takes as parameter a const reference to a contact descriptor that describes
the collision. This is passed to private member functions
`Shapes::CDynamicCircle::CollisionResponseStatic`,
`Shapes::CDynamicCircle::CollisionResponseKinematic`, or
`Shapes::CDynamicCircle::CollisionResponseDynamic`,
depending on whether the shape that this dynamic circle is colliding with
is, respectively, static, kinematic, or dynamic.

\anchor section5-12-1
### 5.12.1 Static Shape Collision Response

`Shapes::CDynamicCircle::CollisionResponseStatic` computes a dynamic
circle's response to collision with a static shape. 
The dynamic circle is moved along the contact normal by the setback distance.
If the dynamic circle is moving towards to POI, then its velocity is
flipped and multiplied by the product of the dynamic circle and the
static shape's elasticity.

\anchor section5-12-2
### 5.12.2 Kinematic Shape Collision Response

\anchor fig26
\image html kinematiccollide.png "Fig. 26: Kinematic circle (yellow) collides with kinematic shape." width=35%

`Shapes::CDynamicCircle::CollisionResponseKinematic` computes a dynamic
circle's response to collision with a kinematic shape.
It first calls `Shapes::CDynamicCircle::CollisionResponseStatic` to modify the
dynamic circle's position and velocity as if the kinematic shape
were static. It then gives an extra kick to the
dynamic circle's velocity from the kinematic shape's rotation
delivered through the POI (see \ref fig26 "Fig. 26").
Let \f$\vec{w}\f$ be the vector from the kinematic shape's
center of rotation to the POI and let \f$\vec{w}_\perp\f$
be the counterclockwise perpendicular to \f$\vec{w}\f$, computed using
`Shapes::perp`.
Suppose the kinematic shape has rotation speed \f$a\f$ rotations
per second. Then 
the velocity of the POI at time of impact is \f$2 \pi a \vec{w}_\perp\f$
(remembering that the length of \f$\vec{w}_\perp\f$ is the radius of rotation).
Therefore, the velocity of the POI relative to the dynamic circle
is \f$\vec{v}_1 = 2 \pi a \vec{w}_\perp - \vec{v}\f$, where \f$\vec{v}\f$ is
the velocity of the dynamic circle.
Let \f$\vec{v}_2\f$ be the component of \f$\vec{v}_1\f$
parallel to \f$\vec{u}\f$
the vector from the POI to the center of the dynamic circle
shown in red in \ref fig26 "Fig. 26".
Then the product of \f$\vec{v}_2\f$ times the elasticities of the shapes
is added to the velocity \f$\vec{v}\f$ of the dynamic circle.


\anchor section5-12-3
### 5.12.3 Dynamic Shape Collision Response

`Shapes::CDynamicCircle::CollisionResponseDynamic` computes a dynamic
circle's response to collision with a dynamic shape.
The code here is similar to the response code in
<a href="../pool/class_c_object_manager.html#acee7c392319024d71772e2d290a1cc7d">NarrowPhase</a> in the <a href="../pool/index.html">Pool End Game</a>,
with the major change being the fact that the balls may have different
masses, and so we use the formula from
<a href="../newton/index.html#section2">Section 2</a>
of <a href="../newton/index.html">Newtons's Cradle and Friends</a>
instead of 
<a href="../newton/index.html#section1">Section 1</a>.

\anchor section5-13
## 5.13 Compound Shapes

`Shapes::CCompoundShape` consists of an `std::vector` of shapes
and some public functions that can be used to rotate the whole
shape as if it were kinematic. This is mainly for convenience.

\anchor section5-14
## 5.14 Naked Shapes

\anchor fig27
\image html nakedlineseg.png "Fig. 26: A naked line segment with no contact (left), a bad contact (middle) and the correct collision with a protected line segment (right)." width=60%

You will notice from the above that collisions that involve a dynamic
circle colliding with the ends of a line segment
(\ref section5-8 "Section 5.8") or arc (\ref section5-10-4 "Section 5.10.4") are rejected.
For example, dynamic circle collide with line segment is done by finding the closest point to the center of the circle on the line through the line segment and rejecting it if it is not on the line segment, as shown in \ref fig27 "Fig.27", left. 
Even worse, the dynamic circle may move from there so that the POI is
actually on the line segment, shown in red in \ref fig27 "Fig.27", middle.
The collision response for the dynamic circle will place it in the
grey dotted circle with velocity away from the line segment.
This usually results in a large jump in position so that the
dynamic circle skims off the edge of the line segment.
What we really want is for the dynamic circle to bounce off
the end of the line segment, as shown in \ref fig27 "Fig.27", right.
For this to happen, the programmer needs to actually place an
instance of `Shapes::CPoint` there and make sure that collision detection of
dynamic shapes and points is done before dynamic shapes and line segments or arcs.
We will call a line segment or arc without instances of
`Shapes::CPoint` to protects its ends a <em>naked shape</em>.

\anchor fig28
\image html notnaked.png "Fig. 28: A line segment (black) that shares a point with and is tangent to an arc (blue), and an incorrect guard point (red)." width=30%

However, there are places in which a guard point is unnecessary and may actually
give incorrect behavior. This includes arcs and line segments that are share
an end point and are tangent to other arcs or line segments.
For example, in \ref fig28 "Fig. 28",
if the red dot is an instance of `Shapes::CPoint` then the green circle
may bounce off it and recoil leftwards and down instead of rightwards and down.

\anchor section6
# 6. What Next?

Next, take a look at the <a href="../collisionmath/index.html">Collision Math Toy</a>.
**/
