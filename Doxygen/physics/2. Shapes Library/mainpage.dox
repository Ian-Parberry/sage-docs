/**
\mainpage notitle

\anchor section1
# 1. Introduction

This project consists of a collection of basic shapes that can be collided.
It's not intended to be a full collision module, but it will give
you a sense of some of the math and physics used in collision detection and response.
It's implemented as a separate project that compiles to a library file
that is linked into the
[Collision Math Toy](../collisionmath/index.html) and the
[Pinball Game](../pinball/index.html). 
Note that unlike the code in the 
[Pool End Game](../pool/index.html), the collision detection
and response code here does not compute exact responses, but instead computes
an approximation using faster methods. 
As a result, tunneling and overlap may occur.

\anchor section2
# 2. Keyboard Controls

This project compiles into a library, so there are no keyboard
controls here.

\anchor section3
# 3. Building the Library

This code uses the DirectX12 Toolkit.
Make sure that you have followed the
instructions in
<a href="../install/index.html#directxtk12">Section 3</a> of the
<a href="../install/index.html">SAGE Installation Instructions</a>.
Note that this project is independent of <a href="../sage/index.html">SAGE</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`2. Shapes Library`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Shapes.sln`</span>
 with Visual Studio and build the Release and Debug configurations.
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

There's no executable file to run here, remember, it just compiles into a library file. If you're interested, the library files are
<span style="background-color:#D8E4D8;">`x64\Release\Shapes.lib`</span>
and <span style="background-color:#D8E4D8;">`x64\Debug\Shapes.lib`</span>.

\anchor section5
# 5. Code Breakdown

All of the code in this library is in a namespace called `Shapes`.

\anchor section5-1
## 5.1 Helper Functions

`ShapeMath.h` and `ShapeMath.cpp` contain some handy helper functions
for this project. Since this project is independent of <a href="../sage/index.html">SAGE</a>, some <a href="../sage/index.html">SAGE</a> functions are duplicated here. Of particular interest is `FailIf`,
which will be used inside functions in this project to test a Boolean condition and bail out from the function returning `false` if the condition is `true`.

    #define FailIf(x) if(x)return false; 

This will make our code easier to read when we have multiple failure points
within a function.

\anchor section5-2
## 5.2 Axially Aligned Bounding Boxes

\anchor fig1
\image html aabb.png "Fig. 1: AABBs (green) for a circle and an arc." width=25%

An _axially aligned bounding box_ (AABB for short) is a minimal-size
rectanle that bounds a shape
and has its edges parallel to the X and Y axes.
For example, \ref fig1 "Fig. 1" shows the AABB for a circle and an arc.
AABBs are used in narrow phase collision detection to quickly and efficiently
reject things that are too far apart to collide.
Our AABBs are implemented by a class `Shapes::CAabb2D`,
which has two private member variables of type `Vector2`,
`Shapes::CAabb2D::vTopLeft` and `Shapes::CAabb2D::vBottomRt` which store
the coordinates of
its top left and bottom right corners as shown in \ref fig2 "Fig. 2".

\anchor fig2
\image html corners.png "Fig. 2: An AABB is defined by its top left and bottom right corners." width=40%

\anchor section5-2-1
### 5.2.1 Building AABBs

AABBs can be built by creating one that encloses a single point
using the overloaded assignment operator `Shapes::CAabb2D::operator=()`,
and expanding them to include a new point using `Shapes::CAabb2D::operator+=()`.

\anchor section5-2-2
### 5.2.2 AABB Intersection Tests

There are two intersection tests involving AABBs which are implemented
by overriding `Shapes::operator&&`. The first one returns `true` if two AABBs have
non-empty intersection:
<a href="_a_a_b_b_8h.html#ae71c3550e2d92b21fd23bc51c34bf4d0">
`bool operator&&(const CAabb2D&, const CAabb2D&)`</a>.
The best way to think about this is to consider how this function fails,
that is, how two AABBs don't intersect. Suppose we have two AABBs \f$A\f$ and
\f$B\f$, and that 
\f$A\f$ has top left corner \f$[a_l, a_t]\f$
and bottom right corner \f$[a_r,a_b]\f$ and
\f$B\f$ has top left corner \f$[b_l, b_t]\f$
and bottom right corner \f$[b_r,b_b]\f$.
One way that \f$A\f$ and \f$B\f$ can be drawn without overlap
is for \f$A\f$ to be completely to the left of \f$B\f$, as shown in
\ref fig3 "Fig. 3", in which case
\f$a_r < b_l\f$.

\anchor fig3
\image html aabbintersect.png "Fig. 3: AABB intersection test." width=25%

Similarly, \f$A\f$ could be completely to the right of \f$B\f$, 
in which case \f$a_l > b_r\f$;
\f$A\f$ could be completely above \f$B\f$, 
in which case \f$a_b > b_t\f$; or
\f$A\f$ could be completely below \f$B\f$, 
in which case \f$a_t < b_b\f$.
These are the only ways that \f$A\f$ can not overlap \f$B\f$.
Therefore \f$A\f$ and \f$B\f$ don't intersect iff
\f[
(a_r < b_l) \vee (a_l > b_r) \vee (a_b > b_t) \vee (a_t < b_b),
\f]

That is, using <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws">De Morgan's Law</a>,
\f$A\f$ and \f$B\f$ _do_ intersect iff
\f[
(a_r \geq b_l) \wedge (a_l \leq b_r) \wedge (a_b \leq b_t) \wedge (a_t \geq b_b).
\f]

This AABB intersection test is therefore extremely fast, using at most
four floating point comparisons and three logical operations.

The second AABB intersection test returns `true` if a point is inside an AABB:
<a href="_a_a_b_b_8h.html#a1f0ed51adcd95498db5fe30237772fc1">
`bool operator&&(const CAabb2D&, const Vector2&)`</a>.
Suppose the AABB has top left point \f$[u_x, u_y]\f$,
bottom right point \f$[v_x, v_y]\f$, and the point to be
tested for intersection with it is \f$\vec{p} = [p_x, p_y]\f$,
as shown in \ref fig4 "Fig. 4".

\anchor fig4
\image html ptinaabb.png "Fig. 4: Point in AABB test." width=20%

Then \f$\vec{p}\f$ is inside the bounding box iff
\f[
(u_x \leq p_x) \wedge (p_x \leq v_x) \wedge (v_y \leq p_y) \wedge (p_y \leq u_y)
\f]

The point-in-AABB intersection test is also extremely fast, using at most
four floating point comparisons and three logical operations.

\anchor section5-3
## 5.3 Shape and Motion Types

The Shapes library has four main shapes: 
point, line segment, circle, and arc.
There is also a line shape for internal use only.
Shape types are identified using `Shapes::eShape`, defined in `Shape.h`.
It also has three motion types,
static, kinematic, and dynamic.

1. Static shapes neither move nor rotate and are not affected by collisions.
2. Kinematic shapes do not move but can rotate about a static point. They are not affected by collisions.
3. Dynamic shapes (currently only circles) can move and rotate fully and are affected by collisions.

Motion types are identified using `Shapes::eMotion`, also defined in `Shape.h`.

\anchor section5-4
## 5.4 Basic Shapes

`Shapes::CShapeCommon`
`Shapes::CShapeDesc`
`Shapes::CShape`

\anchor section5-5
## 5.5 Collision Detection and Response

Shapes that can collide with other shapes will have a `CollisionDetected` function that
takes a reference to an instance of 
the contact descriptor `Shapes::CContactDesc` that has been initialized with a pointer to
the current shape `m_pShape` and a pointer to the dynamic shape (currently only
dynamic circles are implemented) `m_pCircle`.
If the two shapes overlap, `CollisionDetected` will
fill in the other member variables of the contact descriptor as follows and return `true`.
The point of intersection (the coordinates of the point at which the shapes first collided,
which is usually between frames)
is computed in the 2D vector `m_vPOI`, the normal to the collision is computed in `m_vNorm`,
the setback distance (the distance that the dynamic shape must be moved back
along the collision normal to its position at the time of impact)
is computed in `m_fSetback`, and the collision speed is computed in `m_fSpeed`.
The main difference between collision detection and response in this
project as opposed to the previous one
(<a href="../pool/index.html">The 8-ball Pool End Game</a>)
is that here the POI will be approximated by the closest point on the shape to the center of the dynamic circle. This is an outrageous fudge, but it looks right in practice
and is faster to compute than the alternative.

Shape classes will have various intersection functions that detect overlap with other shapes.
Dynamic shapes (the only shapes that can currently react to a collision)
They will have a `CollisionResponse` function that takes as parameter a constant reference
to a contact descriptor provided by some call to a `CollisionDetected` function.

\anchor section5-6
## 5.6 Lines and Line Segments

\anchor fig5
\image html inheritance0.png "Fig. 5: Inheritance diagram for lines and line segments." width=15%

\anchor section5-6-2
### 5.6.2 Lines

Infinite lines are implemented as class `Shapes::CLine`, which is for internal use only.
`Shapes::CLine` stores a line's gradient \f$m\f$, inverse gradient \f$1/m\f$,
\f$x\f$-intercept \f$c\f$, and
\f$y\f$-intercept \f$b\f$.
A vertical line has gradient \f$m = \infty\f$ (implemented as `float::Inf`),
\f$1/m = 0\f$, and \f$b = \infty\f$.
A horizontal line has gradient \f$m = 0\f$,
\f$1/m = \infty\f$, and \f$c = \infty\f$.

\anchor section5-6-2-1
#### 5.6.2.1 The Line Constructor

The `Shapes::CLine` constructor takes two parameters, a point \f$\vec{p}\f$ and
a floating point gradient \f$m\f$, and initializes its member variables
to represent the line of gradient \f$m\f$ through point \f$\vec{p}=[p_x, p_y]\f$.
That is, its gradient is  \f$m\f$, its inverse gradient \f$1/m\f$,
its \f$y\f$-intercept is \f$p_y - p_xm\f$, and its \f$x\f$-intercept is \f$p_x - p_y/m\f$.

\anchor section5-6-2-2
#### 5.6.2.2 Point of Intersection of Two Lines

`Shapes::CLine::Intersect` computes the point of intersection between two lines.
If both lines have the same gradient, then there is no point of intersection
and the function returns `Vector2(Inf, Inf)`.
Otherwise, if neither lines are vertical,
and the lines have equations \f$y=m_0x + c_0\f$ and \f$y=m_1x+c_1\f$
as shown in \ref fig6 "Fig. 6", then the
\f$x\f$-coordinate of the point of intersection of the lines satisfies the equation
\f$m_0p_x + c_0 = m_1p_x+c_1\f$, that is, \f$p_x = (c_1 - c_0)/(m_0 - m_1)\f$.
The \f$y\f$-coordinate of the point of intersection is therefore
\f$p_y = m_0p_x + c_0 = m_0(c_1 - c_0)/(m_0 - m_1) + c_0\f$.

\anchor fig6
\image html lineline1.png "Fig. 6: Intersection of two nonvertical lines." width=30%

Otherwise, one of the lines is vertical and the other is not.
Suppose the first line is vertical and has equation \f$x = c_0\f$,
and that the second line has equation \f$y=m_1x+c_1\f$.
Let the point of intersection \f$\vec{p}\f$ have coordinates \f$[p_x, p_y]\f$
as shown in \ref fig7 "Fig. 7".

\anchor fig7
\image html lineline2.png "Fig. 7: Intersection of a line with a vertical line." width=30%

Then \f$p_x = c_0\f$ since \f$\vec{p} = [p_x, p_y]\f$ is on the vertical line \f$x = c_0\f$.
Therefore \f$p_y = m_1 c_0 + c_1\f$ since \f$\vec{p}\f$ is on the line \f$y=m_1x+c_1\f$.
The case where the second line is vertical and the first line is not vertical is similar.

\anchor section5-6-2-3
#### 5.6.2.3 Point on Line Closest to Another Point

\anchor fig8
\image html lineclosestpt0.png "Fig. 8: Gradient of perpendicular line." width=40%

Let \f$\triangle ABC\f$ be the triangle shown in \ref fig8 "Fig. 8",
where \f$\overline{AB}\f$ has equation \f$y=m_0x + c_0\f$,
where \f$\overline{BC}\f$ has equation \f$y=m_1x + c_1\f$,
and \f$\overline{AC}\f$ lies along the positive \f$X\f$-axis.
Let \f$\theta = \angle BAC\f$.
Drop a line perpendicular from \f$B\f$ down to a point \f$D\f$ the \f$X\f$-axis
(shown in blue in \ref fig8 "Fig. 8"). Then, \f$\tan \theta = d_y/d_x\f$ (also
shown in blue), that is,
rise over run, and so \f$m_0 = \tan \theta\f$.
Notice that \f$\angle BAC = 90^\circ - \theta\f$ (shown in green in \ref fig8 "Fig. 8").
Therefore, the angle from the positive \f$X\f$-axis to \f$\overline{BC}\f$ is
\f$90^\circ - \theta\f$ (shown in red in \ref fig8 "Fig. 8").
Since \f$\overline{AB}\f$ has equation \f$y=m_0x + c_0\f$, by an argument similar to the above,
\f$m_1 = \tan 90^\circ + \theta\f$.
Therefore,
\f[
m_1 = \tan (90^\circ + \theta)
= \frac{\sin (90^\circ + \theta)}{\cos (90^\circ + \theta)}
=- \frac{\cos \theta}{\sin \theta}
=\frac{-1}{\tan \theta}
=\frac{-1}{m_0}.
\f]

Therefore, as shown in \ref fig9 "Fig. 9" the closest point on a line \f$L_0\f$
with gradient \f$m\f$ to a point \f$\vec{p}\f$
can be found by computing the point of intersection of the line \f$L_0\f$
with the line \f$L_1\f$ with gradient \f$-1/m\f$ through point \f$p\f$.
\f$L_1\f$ is constructed using the `Shapes::CLine` constructor
(see \ref section5-6-2-1 "Section 5.6.2.1")
and its point of intersection with \f$L_0\f$ is computed using \f$L_0\f$'s
`Shapes::CLine::Intersect` function (see \ref section5-6-2-2 "Section 5.6.2.2").


\anchor fig9
\image html lineclosestpt1.png "Fig. 9: Point on line closest to a point." width=27%

\anchor section5-6-3
### 5.6.3 Line Segments

Line segments are implemented as class `Shapes::CLineSeg`.
They are instantiated using the descriptor `Shapes::CLineSegDesc`.

\anchor section5-7
## 5.7 Points, Circles, and Arcs

\anchor section5-7-1
### 5.7.1 Points

Points are implemented as class `Shapes::CPoint`.
They are instantiated using the descriptor `Shapes::CPointDesc`.

\anchor section6
# 6. What Next?

Next, take a look at the <a href="../collisionmath/index.html">Collision Math Toy</a>.
**/
