/**

\mainpage notitle

\anchor section1
# 1. Introduction

\anchor fig1
\image html card.png "Fig. 1: Example of a card used in the Stroop Test." width=30%

The _Stroop Test_ 
is used as a measure of attention in standardized psychological tests.
The participant is presented
with a series of words randomly chosen from "red", "green", and "blue".
These words are randomly colored either red, green, or blue, which
means that the colors don't necessarily match the words.
The participant has to say the word, _not_ the color it is drawn in.
For example, the word "blue" in \ref fig1 "Fig. 1"
is colored green, but the participant must say "blue".
This is harder than it sounds.
Studies have shown that participants take longer to complete the test than they
would to recognize just words and colors alone. 
The Stroop Test Game makes the classical Stroop Test into a
game with completely gratuitous and totally unnecessary 
audiovisual effects including sound, particle effects, and physics (see
\ref fig2 "Fig. 2").

\anchor fig2
\image html bang.png "Fig. 2: Screen shot." width=60%

The remainder of this page is divided into five sections.
\ref section2 "Section 2" lists the controls
and their corresponding actions,
\ref section3 "Section 3" tells you how to build it,
\ref section4 "Section 4" gives you a list of actions to take in the game to see some of its
important features,
\ref section5 "Section 5" gives a breakdown of the code,
and
\ref section6 "Section 6" addresses the question "what next?".

\anchor section2
# 2. Keyboard Controls

<center>
<table>
<tr>
<td><center><b>Key</b></center></td>
<td><center><b>Action</b></center></td>
<tr>
<td><center>F1</center></td>
<td>Help (this document)</td>
<tr>
<td><center>F2</center></td>
<td>Toggle draw mode from "sprites only", to "sprites and lines", to "lines only"</td>
<tr>
<td><center>F3</center></td>
<td>Toggle drawing of air pressure</td>
<tr>
<td><center>F4</center></td>
<td>Toggle drawing of wind vectors</td>
<tr>
<td><center>F5</center></td>
<td>Toggle drawing of vertices</td>
<tr>
<td><center>F6</center></td>
<td>Toggle drawing of particle effects</td>
<tr>
<td><center>Left arrow</center></td>
<td>Hit for red words</td>
<tr>
<td><center>Up arrow</center></td>
<td>Hit for green words</td>
<tr>
<td><center>Right arrow</center></td>
<td>Hit for blue words</td>
<tr>
<td><center>PrtScr (hold down)</center></td>
<td>Save screenshot to a PNG file</td>
<tr>
<td><center>Esc</center></td>
<td>Quit game and close the window</td>
</table>
</center>

\anchor section3
# 3. Building the Game

This code uses <a href="../sage/index.html">SAGE</a>
and <a href="https://github.com/erincatto/Box2D">Box2D</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>
and the <a href="../installphysics/index.html">Box2D Installation Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`12. Stroop Test Game`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Stroop Test Game.sln`</span>
 with Visual Studio and build the Release configuration.
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

\anchor fig3
\image html word.png "Fig. 3: A colored color word dropping from the top of the window." width=60%

After a few explanatory pages have been displayed
the main part of the game begins and a series of colored words
drops from the top of the window, passing through horizontal regions marked
_excellent_, _good_, and _fair_ at the left of the window. The player
must hit a key (see \ref section2 "Section 2") corresponding to the word
(not its color) before the word falls to the bottom of the window and goes
out of play, at
which time it turns black and spawns a cloud of bubbles.
Only one word will be in play at a time and
that word will be the only one that is red, green, or blue (see \ref fig3 "Fig. 3").
If the player manages to hit the correct key before the word
goes out of play, then the word will explode, generating a smoke cloud
and a spray of letters in all directions.
The bubbles, which are totally gratuitous except
for serving as a distraction to the player, drift generally upwards and
are blown about by passing words and by explosions.

At the bottom of the window is a score bar that keeps track
of, from left to right,
the number of words dropped,
the number exploded in the _excellent_ region,
the number exploded in the _good_ region,
the number exploded in the _fair_ region,
the number that the player got wrong (hitting the wrong key).
the number that the player missed (not hitting a key before the word goes out of play),
and a somewhat dubious score (which can be negative) computed from these statistics. 
As you might expect, you get more points for correctly exploding a word
in the _excellent_ region than you do for exploding a word in the
_good_ region, which in turn gives you more points than you
do for exploding a word in the _fair_ region. This means that you
must be both fast and accurate to get a high score.
Out-of-play words at the bottom of the screen will eventually explode but
do not contribute to the score. These unexpected explosions are yet another
distraction to the player, as is the fact that the image of John Ridley Stroop
(the inventor of the Stroop test)
at the right of the window moves its eyes to follow the current word in play.

The bubbles mentioned in the previous paragraph are
blown about by a _vector field_.
We place evenly spaced grid points throughout the play area,
and at each point we store a floating point _pressure_ and a
vector (hence the name _vector field_). Pressure is increased in front of a falling word and reduced behind it.
For example \ref fig4 "Fig. 4" shows in various shades of brown, with
darker shades indicating higher pressure.

\anchor fig4
\image html pressure.png "Fig. 4: Air pressure (darker means higher pressure)." width=60%

The vectors point from grid points with higher pressure
towards a nearby area with lower pressure, as shown in \ref fig5 "Fig. 5".
The magnitude of each vector is proportional to the pressure difference.

\anchor fig5
\image html arrows.png "Fig. 5: Arrows from high pressure to low pressure." width=60%

The grid points are also shown with the vectors in  \ref fig6 "Fig. 6".

\anchor fig6
\image html dots.png "Fig. 6: Vector field points." width=60%

These effects are not intended for use in the game - they are just there to show programmers
what is going on behind the scenes. They can be toggled on an off using
the function keys listed in \ref section2 "Section 2".

\anchor section5
# 5. Code Breakdown

This section is divided into four subsections, one for each of the
most important physics-oriented parts of the code.
\ref section5-1 "Section 5.1" describes the _vector field_ used to create the wind that blows the bubbles around,
\ref section5-2 "Section 5.2" describes the _bubble engine_ which manages the bubbles,
\ref section5-3 "Section 5.3" describes the John Stroop caricature, and
\ref section5-4 "Section 5.4" describes how the colored words are created, maintained, and destroyed.

\anchor section5-1
## 5.1 The Vector Field

The vector field shown in \ref fig5 "Fig. 5" is implemented in `CVectorField`. The field points,
called _vertices_,
shown in \ref fig6 "Fig. 6" are stored there in a 2D array
of instances `CVertex`. A single instance of `CVectorField` is created in
`CGame::Initialize` and a pointer to that instance is stored in `CCommon::m_pVectorField`
for common use. `CVertex` maintains a vector `CVertex::m_vVector` for the wind direction at a vertex
and a floating point `CVertex::m_fPressure` for the air pressure at a vertex.

`CVectorField::Update` is called once per letter from `CObjectManager::Update`,
with parameters describing the letter's position and velocity in Physics World.
`CObjectManager::Update` is called once per animation frame from `CGame::ProcessFrame`.
`CVectorField::Update` finds the vertex closest to the letter using 
`CVectorField::GetClosestVertex`. It then updates the pressure at that vertex
by calling the private version of `CVectorField::Update`.
Air pressures are also drastically changed at vertices close to an
explosion when `CVectorField::Detonate`, which is called from
`CObjectManager::AnimateJointExplosion` when a word explodes due to user input
or `CObjectManager::ExplodeOldWords` expiration, and 
from `ExplodeOldLetters` when expired letters themselves explode.
Vectors and pressures are smoothed out by calling `CVectorField::Step`
once per frame from `CObjectManager::Update`.

\anchor section5-2
## 5.2 The Bubble Engine

The bubbles emitted when the words collide with the bottom edge (for example, see \ref fig2 "Fig. 2")
are managed by a _bubble engine_.
The bubble engine is implemented in `CBubbleEngine`, which is a specialized particle engine
derived from
<a href="../sage/index.html#sec3-8">`Sage::Sage::CParticleEngine2D`</a>.
A single instance of `CBubbleEngine` is created in
`CGame::Initialize` and a pointer to that instance is stored in `CCommon::m_pBubbleEngine` for common use.
Its constructor `CBubbleEngine::CBubbleEngine` takes a pointer to an instance of `CVectorField`
which is stores in `CBubbleEngine::m_pVectorField`.
`CBubbleEngine` has a function `CBubbleEngine::Step`
that is called once per animation from from `CGame::ProcessFrame`.
`CBubbleEngine::Step` iterates through a list of bubbles and adds to the velocity
of each bubble a constant times the vector stored in the closest grid
point in the vector field pointed to by `CBubbleEngine::m_pVectorField`
(see  \ref section5-1 "Section 5.1").

\anchor section5-3
## 5.3 The John Stroop Caricature

The caricature of John Stroop with swivelling eyeballs is implemented in `CStroop`.
The shape outlining his head is a simple list of `b2EdgeShape` created in the constructor `CStroop::CStroop`.
It would be tempting to use `b2PolygonShape` instead, but unfortunately Box2D
only allows a small number of vertices, and additionally the polygon must be convex,
which as \ref fig7 "Fig. 7" shows, John Stroop's head is definitely not.
`CStroop::CStroop` has a local array `v2Stroop` with `NUMPOINTS = 46` points
that were read from the sprite image using an image editor.

\anchor fig7
\image html shapes.png "Fig. 7: Shapes in Physics World overlaying the sprites." width=60%

\anchor section5-4
## 5.4 The Words

Each letter of the colored words is implemented as an instance of `CObject`.
These are managed by an instance of `CObjectManager`.
`CObjectManager::CreateWorldEdges` creates
the Physics World shapes for the world edges at the left and right
sides of the window and at the top of the score bar as shown in \ref fig7 "Fig. 7".
Compare this to \ref fig3 "Fig. 3" for example.
The shapes for each word are created in `CObjectManager::CreateWord`.
As you can see in in \ref fig7 "Fig. 7", each letter is a `b2PolygonShape` set using
`b2PolygonShape::SetAsBox`. The letters are connected in sequence using `b2WeldJoint`s.
`CObjectManager::CreateWord` is called from `CObjectManager::CreateRandomWord`,
which is called periodically from `CGame::ProcessState` when the game state `CCommon::m_eGameState`
is `eGameState::Playing`.
`CGame::ProcessState` is called from `CGame::ProcessFrame`, which is
automatically called once per animation frame.
Word explosion is handled by `CObjectManager::ExplodeOldWords`,
which destroys the joints between the letters and 
applies an impulse to each letter (we have already seen something similar in the
<a href="../cannon/index.html#section5-1-3">Cannon Game</a> when the cannon explodes).


\anchor section6
# 6. What Next?

Next, take a look at the <a href="../binary/index.html">Binary Counter Toy</a>.


**/

