/**
\mainpage notitle

\anchor section1
# 1. Introduction

This is a collision detection and response toy intended
to help you visualize what's going on in the 
in the [Shapes Library](../shapes/index.html) by experimenting with various settings and measurements using a dialog box.
\ref fig1 "Fig. 1" shows a screenshot of the toy before any balls are launched. Balls are launched from the bottom right corner and
travel vertically before hitting the arc in the top right corner and entering the main play area. There are various shapes to collide with, including line segments, points, arcs, and circles. Two objects,
the convex arc at the top left corner and the pinball bumper at the middle right, have an
<a href="../shapes/index.html#section5-4">elasticity</a>
greater than `1.0f`, that is,
they increase the velocity of balls that collide with them.
Some of the line segments and arcs have
motion type
<a href="../shapes/index.html#section5-3">`Shapes::eMotion::Kinematic`</a>,
although they start out with rotational velocity zero until
you select the Rotate checkbox in the
\ref section2-7 "Other" area of the 
\ref section2 "dialog box" controls, at which time they will
have a constant but non-zero rotational velocity.

\anchor fig1
\image html screenshot.png "Fig. 1: Screen shot." width=60%

The remainder of this page is divided into five sections.
\ref section2 "Section 2" lists the controls
and their corresponding actions,
\ref section3 "Section 3" tells you how to build it,
\ref section4 "Section 4" gives you a list of actions to take in the game to see some of its
important features,
\ref section5 "Section 5" gives a breakdown of the code,
\ref section6 "Section 6" contains some programming problems,
and
\ref section7 "Section 7" addresses the question "what next?".

\anchor section2
# 2. Controls

\anchor fig2
\image html dialogbox.png "Fig. 2: The dialog box containing the controls." width=50%

The Collision Math Toy is controlled by the dialog box shown in \ref fig2 "Fig. 2",
which is divided up into regions as described below.

\anchor section2-1
## 2.1 Balls in Play

\anchor fig3
\image html dialogbox1.png "Fig. 3: The Balls in Play region." width=197px

- Launched: The number of balls launched.
- Overlaps: The number of balls that have position identical to another ball. This will happen if two balls overlap by too much as a result of, say, inaccurate collision-response. Clearly code should be written to exclude this behavior, but it hasn't been implemented so that you can see that it happens.
- Strays: The number of balls that have tunneled through the outside walls. This will happen if a small ball is moving quickly and the number of motion and collision iterations is inadequate. Clearly code should be written to exclude this behavior, but it hasn't been implemented so that you can see that it happens.

\anchor section2-2
## 2.2 Load

\anchor fig4
\image html dialogbox2.png "Fig. 4: The Load region." width=61px

- FPS: The current number of animation frames per second.
- Load bar: A rough estimate of the amount of CPU time being used per animation frame as a fraction of the frame time.

\anchor section2-3
## 2.3 Next Ball

\anchor fig5
\image html dialogbox3.png "Fig. 5: The Next Ball region." width=154px

- Size: The size of the next ball to be launched is controlled by a slider.
- Speed: The speed of the next ball to be launched is controlled by a slider.

\anchor section2-4
## 2.4 Collision Detection and Response

\anchor fig6
\image html dialogbox4.png "Fig. 6: The Collision Detection and Response region." width=166px

- AABB tests per iteration: The number of AABB overlap tests performed per collision iteration.
- AABB tests per second: The number of AABB overlap tests performed per second.
- Full tests per second: The number of full tests performed per second. These are performed only when AABBs overlap.
- Collisions per second: The number of actual collisions per second, that is, the number of full tests that indicate an overlap.

\anchor section2-5
## 2.5 Quadtree

\anchor fig7
\image html dialogbox5.png "Fig. 7: The Quadtree region." width=149px

See \ref section5-4 "Section 5.4" for more details on quadtrees.
- Active: Toggle the use of quadtrees for space subdivision.
- Levels: Set the number of levels in the quadtree.
- Nodes: The number of nodes in an active quadtree.
- Leaves: The number of leaves in an active quadtree.
- Leaf area: The dimension of the rectangle covered by each quadtree leaf.
- Max shapes per leaf: The maximum over all leaves of the number of shapes in a leaf.

\anchor section2-6
## 2.6 Iterations

\anchor fig8
\image html dialogbox6.png "Fig. 8: The Iterations region." width=88px

- Motion: The number of motion iterations per animation frame.
- Collision: The number of collision iterations per motion iteration.

\anchor section2-7
## 2.7 Other

\anchor fig9
\image html dialogbox7.png "Fig. 9: The Other region." width=82px

- Mute: Toggle the collision sounds. You will want to check this box when there are more that a few balls in motion.
- Rotate: Toggle rotation of the kinematic shapes.
- Help: Show help (this page).

\anchor section2-8
## 2.8 Show

\anchor fig10
\image html dialogbox8.png "Fig. 10: The Show region." width=213px

\anchor fig11
\image html show.png "Fig. 11: Show (a) Hit points and Tracks, (b) Tangents, (c) AABBs, (d) Reticles, (e) Velocity, and (f) Sectors."  width=95%


- Hit points: Draw a colored dot at each point of impact of a ball with a static or kinematic shape. The dot color will be the same as the ball color.
For example, \ref fig11 "Fig. 11"(a) shows an orange dot where the orange ball collides with the vertical black line.
The hit point dots will persist for a few seconds then fade away.
- Tracks: Draw a track behind each ball.
For example, \ref fig11 "Fig. 11"(a) shows the track behind the orange ball shortly after it collides with the vertical black line.
The tracks will persist for a few seconds then fade away.
- Tangents: Draw tangents to arcs and line segments.
For example, \ref fig11 "Fig. 11"(b) shows tangents to two line segments and an arc.
- AABBs: Draw AABBs for the collision shapes. 
For example, \ref fig11 "Fig. 11"(c) shows the AABBs for two arcs and a circle.
If quadtrees are active, then also draw the quadtree grid
(see \ref section5-4 "Section 5.4").
- Reticles: Draw a spinning reticle at each point of impact of a ball. The reticle color and style will vary with the type of collision and its rotation speed will vary with the collision speed.
For example, \ref fig11 "Fig. 11"(d) shows two reticles, the upper one
in blue and magenta with the straight edges for a collision between a blue ball and a magenta ball and the lower one in magenta for a collision between the magenta ball and the black line.
- Velocity: Draw an arrow on each ball in the direction of travel with size proportional to speed.
For example, \ref fig11 "Fig. 11"(e) shows arrows whose direction and size depend on the velocity of the ball that it is attached to.
- Sectors: Draw the interior part of arc sectors.
For example, \ref fig11 "Fig. 11"(f) shows the interior sectors of two arcs.
- Lights: Light up static and kinematic shapes briefly after each collision.
For example, \ref fig12 "Fig. 12" shows an arc (and an associated sprite) light up when hit by a ball, 
and \ref fig13 "Fig. 13" shows a guard point light up when hit by a ball.

\anchor fig12
\image html arclit.gif "Fig. 12: Ball colliding with arc with Show Lights set." width=100px

\anchor fig13
\image html pointlit.gif "Fig. 13: Ball colliding with point with Show Lights set." width=100px

\anchor section2-9
## 2.9 Launch

\anchor fig14
\image html dialogbox9.png "Fig. 14: The Launch region." width=108px

- Launch: The launch button will launch the number of balls entered into the edit box beside it. The balls will have pseudo-random colors and a size and speed determined by the sliders in the
\ref section2-3 "Next Ball" region of the dialog box.

\anchor section2-10
## 2.10 Buttons

\anchor fig15
\image html dialogbox10.png "Fig. 15: The Buttons region." width=89px

- Clear: Delete all of the balls.
- Quit: Exit the program.

\anchor section3
# 3. Building the Game

This code uses <a href="../sage/index.html">SAGE</a> and the <a href="../shapes/index.html">Shapes Library</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>
and the <a href="../shapes/index.html#section3">Shapes Library Build Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`3. Collision Math Toy`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Collision Math Toy.sln`</span>
 with Visual Studio and build the Release configuration.
The Release executable file <span style="background-color:#D8E4D8;">`Collision Math Toy.exe`</span>
will appear. 
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

Use the dialog box controls described in \ref section2 "Section 2"
to explore collision detection and response of dynamic
circles colliding with other shapes from the 
<a href="../shapes/index.html">Shapes Library</a>.
It is important to keep in mind that the settings in this toy can be set to values that make bad things happen, in particular, balls may escape
from the play area and balls may be co-located, that is,
drawn on top of one another.

\anchor section5
# 5. Code Breakdown

The most important thing in this project is to see how the
code interacts with the [Shapes Library](../shapes/index.html).
The high points of the code are the object class `CObject`
covered in \ref section5-1 "Section 5.1", 
the object manager class `CObjectManager`
covered in \ref section5-2 "Section 5.2",
the gate class `CGate`
covered in \ref section5-3 "Section 5.3",
and the quadtree class `CQuadTree`
covered in \ref section5-4 "Section 5.4".

\anchor section5-1
## 5.1 %CObject

Unlike the game object in <a href="../pool/class_c_object.html">The Pool End Game</a>, this game object does not have member variable
`m_vPos` for its position nor does it have `m_vVel` for its velocity.
Instead it has a pointer to a shapes from the `Shapes` library,

    Shapes::CShape* m_pShape = nullptr;

`CObject` gets the value of this pointer from its constructor. 
`CObject` is managed by `CObjectManager`, which is the subject of the next subsection.

\anchor section5-2
## 5.2 %CObjectManager

The object manager's job is, of course, to manage the objects.
The most interesting functions are
`CObjectManager::Move` covered in \ref section5-2-1 "Section 5.2.1",
`CObjectManager::BroadPhase` covered in \ref section5-2-2 "Section 5.2.2", and
`CObjectManager::NarrowPhase` covered in \ref section5-2-3 "Section 5.2.3".

\anchor section5-2-1
### 5.2.1 %CObjectManager::Move

`CObjectManager::Move` iterates through the dynamic and kinematic shapes
pointed to by its objects, calling `Shapes::CShape::move`
or in most cases, the appropriate function derived from it.
More correctly, `CObjectManager::Move` does this in a loop `CCommon::m_nMIterations`
times (the `M` stands for _motion_ iterations). This value can be
modifed in real time using the
\ref section2-6 "Iterations region" of the
\ref section2 "Controls dialog box".
Why would you have more than one motion iteration?
It is so that the shapes move less far in each motion so that tunneling is mitigated or avoided. How is that handled in our code?
When the number of iterations is changed in the dialog box,
a callback function `CDialogBox::DlgProc` in <span style="background-color:#D8E4D8;">`DialogBox.cpp`</span>
changes the value of `Shapes::CShapeCommon::m_fTimeStep`.
This value then gets used in
`Shapes::CDynamicCircle::move` and `Shapes::CShape::move`
to scale back translation and rotation, respectively.

\anchor section5-2-2
### 5.2.2 %CObjectManager::BroadPhase

_Broad phase_ collision detection and response
is a function that detects and computes responses for
collisions with all game objects.
Broad phase will call _narrow phase_ collision detection
and response, which 
is a function that detects and computes responses for
collisions between two game objects. 
You might be tempted to use the following naive
implementation of a
broad phase collision detection and response function
which calls `NarrowPhase` once for each
pair of shapes in an `std::vector` of pointers to `CShape`.

    void CObjectManager::BroadPhase(std::vector<CShape*> v){
      for(auto i: v) 
        for(auto j: v)
          if(i != j)
            NarrowPhase(*i, *j); 
    } //BroadPhase

\anchor bruteforcebroadphase

We call this function _naive_ because `NarrowPhase`
is actually called twice for each pair of `CShape`s.
Instead, we change the second `for` loop to iterate
through the shapes _following_ the one chosen in
the first `for` loop. Let's call this _brute force_ broad phase,
since it calls narrow phase for each and every unordered pair of objects, even though some may be ridiculously far apart.

    void CObjectManager::BroadPhase(std::vector<CShape*> v){
      for(auto i=v.begin(); i!=v.end(); i++) 
        for(auto j=next(i, 1); j!=v.end(); j++)
          NarrowPhase(*i, *j); 
    } //BroadPhase

If there are \f$n\f$ shapes in the parameter `v`, then the
number of calls to `NarrowPhase` is:

\f[
\sum_{i=1}^{n - 1} \sum_{j=i+1}^n 1 = \sum_{i=1}^{n - 1} (n-i)
 = \sum_{i=1}^{n - 1} n - \sum_{i=1}^{n - 1} i
 = n(n-1) - n(n-1)/2
 = n(n-1)/2
 = \Theta (n^2).
\f]

You can see that we have halved the number of calls
to `NarrowPhase` which is a pretty good speed-up
in practice. However,
\f$\Theta(n^2)\f$ is pretty bad when you consider that there
can be only \f$O(n)\f$ collisions
between \f$n\f$ bounding spheres at any one time
(see <a href="../kappa/index.html">Kissing Numbers</a>).
Fortunately, there are many space partitioning data structures and algorithms that can be used to speed up broad phase collision detection.
A <em>quadtree</em> (see \ref section5-4 "Section 5.4") is one of them.

More correctly, `CObjectManager::BroadPhase` does this in a loop `CCommon::m_nCIterations`
times (the `C` stands for _collision_ iterations). This value can be
modifed in real time using the
\ref section2-6 "Iterations region" of the
\ref section2 "Controls dialog box". The code therefore looks more similar to this:

    void CObjectManager::BroadPhase(std::vector<CShape*> v){
      for(int i=0; i<m_nCIterations; i++)
        for(auto i=v.begin(); i!=v.end(); i++) 
          for(auto j=next(i, 1); j!=v.end(); j++)
            NarrowPhase(*i, *j); 
    } //BroadPhase

Notice that this means that `CObjectManager::NarrowPhase`
is called `m_nMIterations*m_nCIterations` per frame for each unordered pair of shapes (see also \ref section5-2-1 "Section 5.2.1").

\anchor fig16
\image html c-iteration.png "Fig. 16: Collisions rippling through four circles that touch." width=17%

The reason for doing more than one collision iteration per frame is because collision detection and response may move a shape in such a way that it now collides with an object that it formerly didn't.
For example, consider a 2D simulation of <a href="../newton/index.html">Newton's Cradle</a> with four
circles numbered 1 through 4 that touch in a straight line.
Suppose that circle 4 has been moved so that it overlaps
circle 3, as shown in \ref fig16 "Fig. 16". 
Now suppose that the object manager has these shapes in ascending order, that is, Shape 1, then 2, then 3, then 4.
\ref bruteforcebroadphase "Brute force broad phase" collision detection and response will call narrow phase for the
following unordered pairs of circles.
However, only the last one (in red) will detect a collision.

> (1, 2), (1,3), (1, 4), (2, 3), (2, 4), <span style="color: red;">(3, 4)</span>

The response will be to move circle 3 to the right where it
overlaps circle 2 as shown in \ref fig16 "Fig. 16".
This won't be caught until the next iteration.

> (1, 2), (1,3), (1, 4), <span style="color: red;">(2, 3)</span>, (2, 4), (3, 4)

The response will be to move circle 2 to the right where it
overlaps circle 1 as shown in \ref fig16 "Fig. 16".
Again, this won't be caught until the next iteration.

> <span style="color: red;">(1, 2)</span>, (1,3), (1, 4), (2, 3), (2, 4), (3, 4)

The response will be to move circle 1 to the right as shown in \ref fig16 "Fig. 16".

Of course, you can argue that these collisions can usually be safely postponed until the next frame, but then you risk instability.
It's best to handle as many as possible in the current frame.
You can also argue that it is a contrived example that would rarely come up in practice. Nonetheless, you should probably use 4 to 6 collision iterations just to be on the safe side.

\anchor section5-2-3
### 5.2.3 %CObjectManager::NarrowPhase

`CObjectManager::NarrowPhase` performs narrow phase collision detection and response, and takes as parameters pointers to
two shapes, the second of which is a dynamic circle
`Shapes::CDynamicCircle` (since other collisions haven't been
implemented yet). The necessary alterations to the simplified
\ref bruteforcebroadphase "brute force broad phase" have been
made in the code. A fast rejection is then performed using AABBs,
`Shapes::CShape::CAabb2D`, because if shapes' AABBs don't overlap,
then the shapes do not overlap. This saves us having to do any more wasted computation on this non-collision.
`CObjectManager::NarrowPhase` uses `Shapes::CShape::CollisionDetected` to fill in a
contact descriptor `Shapes::CShape::CContactDesc` that is then
passed to `Shapes::CCircle::CollisionResponse`, which performs
collision response for both of the shapes. 

If `CObjectManager::NarrowPhase` detects a collision, then it is responsible for collision sounds and particles.
However, since it is given as parameters only pointers to shapes
in the [Shapes Library](../shapes/index.html), it needs a way to find out which instances of `CObject` correspond to the colliding shapes.
We use the _user pointer_ in `Shapes::CShape` for this purpose.
`CObjectManager::MakeShape` makes a shape, given a shape
descriptor and an object descriptor, creates a shape and an object.
It makes the object's shape pointer `CObject::m_pShape`
point to the shape, and makes the shape's user pointer
point to the object by calling `Shapes::CShape::SetUserPtr`.
Functions such as `CObjectManager::NarrowPhase` that have only a pointer `pShape` to an instance of `Shapes::CShape` can get a pointer to the object that it belongs to as follows:

    CObject* pObj = (CObject*)(pCirc->GetUserPtr());

`CObjectManager::NarrowPhase` uses this to, for example, change the sprite of an object involved in a collision from an unlit sprite to a lit sprite as shown in \ref fig12 "Fig. 12".

\anchor section5-3
## 5.3 Gates

A _gate_ (see \ref fig17 "Fig. 17") allows balls
to pass in one direction only, and are reflected back otherwise.

\anchor fig17
\image html clip.png "Fig. 17: The clip used to cover up the line segment used in a gate."

Gates are implemented as an instance of `CGate`.
`CGate` has a pointer `m_pLineSeg` to an instance of
<a href="../shapes/index.html#section5-8">`Shapes::CLineSeg`</a>
and has a function `CGate::NarrowPhase` to do narrow-phase
collision detection and response allowing
balls to pass only in the direction of the
normal to the line segment.

\anchor section5-4
## 5.4 Quadtrees

Quadtrees are a data structure used to speed up
broad-phase collision detection and response.
This section is divided into 5 subsections.
\ref section5-4-1 "Section 5.4.1"
gives the formal definition of a quadtree as an abstract data type.
\ref section5-4-2 "Section 5.4.2" lists some
useful facts about quadtrees.
\ref section5-4-3 "Section 5.4.3" describes
the implementation of the quadtree abstract data type
as the quadtree data structure.
\ref section5-4-4 "Section 5.4.4" describes
how quadtrees are used for collision detection.
\ref section5-4-5 "Section 5.4.5" contains
an analysis of the running time of broad-phase
collision detection using quadtrees  compared to he brute-force method.

\anchor section5-4-1
### 5.4.1 Quadtree Definition

\anchor fig18
\image html quadtree0.png "Fig. 18: A quadtree of depth 3." width=50%

A <em>quadtree</em> is a full 4-ary tree in which
each node represents an AABB covering part of the game world.
That is, it is a tree in which every non-leaf node has
exactly 4 children and every leaf is at exactly depth \f$d\f$
from the root, where the <em>depth</em> of a node is the minimum
number of edges that must be traversed from the node to the root.
For example, \ref fig18 "Fig. 18" shows the depth
of the nodes at each level. The <em>depth</em> of a quadtree
is the depth of its leaves, which is 3 in \ref fig18 "Fig. 18".

\anchor fig19
\image html quadtree1.png "Fig. 19: A quadtree and its AABBs." width=50%

The root of a quadtree contains an AABB that contains the
whole of the game world.
The 4 children of a node subdivide the AABBs of their parent into 4 equal quadrants. For example,
\ref fig19 "Fig. 19"
shows the AABBs stored at the nodes of each level of the quadtree.

\anchor section5-4-2
### 5.4.2 Quadtree Facts

The number of nodes in a quadtree of depth \f$d\f$ is
\f[
\sum_{i=0}^d 4^i = \frac{4^{d+1}-1}{3}.
\f]

For example, the number of nodes in the quadtree shown
in \ref fig18 "Fig. 18" is (summing by level)
\f$1 + 4 + 16 + 64 = 85\f$ and
\f[
\sum_{i=0}^3 4^i = \frac{4^{4}-1}{3} = 255/3 = 85.
\f]

The number of leaves in a quadtree of depth \f$d\f$ is \f$4^d\f$.
For example, the number of leaves in the quadtree shown
in \ref fig18 "Fig. 18" is
\f$4^3 = 64\f$.

\anchor section5-4-3
### 5.4.3 Quadtree Data Structure

\anchor fig20
\image html quadtree2.png "Fig. 20: The index of each node in the quadtree array." width=50%

\anchor fig21
\image html quadtree3.png "Fig. 21: The index of each AABB in the quadtree array." width=50%

We can store an \f$n\f$-node quadtree in an array \f$A[n]\f$
as follows.
The root node is stored at \f$A[0]\f$.
The children of the node in \f$A[i]\f$ are
stored in nodes \f$A[4i+1]\f$, \f$A[4i+2]\f$, \f$A[4i+3]\f$, and \f$A[4i+4]\f$.
The parent of the node in \f$A[i]\f$ is in node \f$A[\lfloor (i-1)/4 \rfloor]\f$. \ref fig20 "Fig. 20" shows the indices
into \f$A\f$ for the nodes of a depth 3, 85-node quadtree.
\ref fig21 "Fig. 21" shows the AABBs labeled with
the indices
into \f$A\f$ for the nodes of a depth 3, 85-node quadtree.

\anchor fig22
\image html quadtree4.png "Fig. 22: The children of the green node at left are the green nodes at right." width=50%

For example, since \f$4 \times 18 = 72\f$, the children of
the node at \f$A[18]\f$ are at nodes
\f$A[73]\f$, \f$A[74]\f$, \f$A[75]\f$, and \f$A[76]\f$,
and since \f$\lfloor 72/4\rfloor = \lfloor 73/4\rfloor = \lfloor 74/4\rfloor = \lfloor 75/4\rfloor = 18\f$, the parent of nodes
\f$A[73]\f$, \f$A[74]\f$, \f$A[75]\f$, and \f$A[76]\f$
is in \f$A[18]\f$ 
(see \ref fig22 "Fig. 22").

As mentioned in \ref section2-8 "Section 2.8",
selecting Show AABBs from the dialog box will draw
the leaf node areas of the AABB in magenta as shown in
\ref fig23 "Fig. 23".

\anchor fig23
\image html quadtree7.png "Fig. 23: Quadtree leaf areas for a quadtree with, from left to right, 2, 3, 4, and 5 levels." width=80%

\anchor section5-4-4
### 5.4.4 Quadtrees for Collision Detection

\anchor fig24
\image html quadtree5.png "Fig. 24: Four ball bearings in a the areas covered by quadtree nodes." width=60%

Consider the areas covered by the nodes of
the quadtree of depth 3 shown in \ref fig24 "Fig. 24"
with four colored balls drawn at their places in the game world.

- The depth 3 (leaf) node areas of the quadtree are shown in the bottom right rectangle of \ref fig24 "Fig. 24" with indices 21--84. There are four ball bearings shown there. The red ball has its AABB completely in leaf 21, the green ball has its AABB completely in leaf 34, the yellow ball has its AABB overlap leaves 34, 45, 36, and 47, and the blue ball has its AABB completely in leaf 72.

- The depth 2 node areas of the quadtree are shown in the bottom left rectangle of \ref fig24 "Fig. 24" with indices 5--20. The red ball has its AABB completely in node 5, the green ball has its AABB completely in node 8, the yellow ball has its AABB overlap nodes 8 and 11, and the blue ball has its AABB completely in node 17.

- The depth 1 node areas of the quadtree are shown in the top right rectangle of \ref fig24 "Fig. 24"
with indices 1--4. The red ball has its AABB completely in node 1, the green ball has its AABB completely in node 1, the yellow ball has its AABB overlap nodes 1 and 2, and the blue ball has its AABB completely in node 4.

- The depth 0 node (root) area of the quadtree is shown in the top left rectangle of \ref fig24 "Fig. 24" with index 0. All of the balls have their AABBs completely within node 0, as expected.

\anchor fig25
\image html quadtree6.png "Fig. 25: Four ball bearings in a quadtree." width=60%

\anchor section5-4-5
### 5.4.5 Quadtrees Analysis

Suppose our game world has dimensions \f$N \times N\f$ and has \f$n\f$
shapes in it.
We begin by building the quadtree structure of depth
\f$\lceil \log_4 N\rceil\f$.
This takes time \f$O(N)\f$.
On each broad phase iteration,
we delete the shapes in the quadtree and reinsert them at their new positions.
This takes \f$ \log N\f$ time per shape, which gives total time of \f$O(n \log N)\f$.
If there are \f$m\f$ non-empty leaves each of which has at most
\f$k\f$ shapes in it, then each iteration of broad phase
makes at most \f$O(mk^2)\f$ calls to narrow phase.
Assume that each call to narrow phase takes time \f$O(1)\f$.
The running time of broad phase is therefore \f$O(m \log N + mk^2)\f$.
If we assume that on average shapes are somewhst widely distributed,
that is, \f$m = \theta(n)\f$ and \f$k = O(1)\f$,
then
\f[
O(m \log N + mk^2) = O(n \log N + n) = O(n \log N).
\f]

If we take \f$N\f$ to be constant for the duration of gameplay and gradually increase the number of shapes \f$n\f$ over time, then the
asymptotic time complexity will be \f$O(n)\f$,
which is much better than the \ref bruteforcebroadphase brute force \f$\Theta ( n^2 )\f$ broad phase collision detection and response algorithm.
Most importantly though, is this true in practice
for reasonable values of \f$n\f$, \f$N\f$, \f$m\f$, and \f$k\f$?

Suppose we
measure the number of AABB tests performed by the brute force method and by quadtrees.
Each measurement records 60 seconds of motion, gathering data 60 times per second.
The quadtree has 4 levels, and each leaf covers 60 × 44 pixels. 
The moving circles have a diameter of 42 pixels, so
at most \f$k=4\f$ balls can be in a leaf.

\anchor fig26
\image html qtest0.png "Fig. 26: Number of intersection tests for up to 32 balls." width=50%

\ref fig26 "Fig. 26" shows the
number of AABB intersection tests used during broad phase
collision detection and response for \f$2 \leq n \leq 32\f$
balls, with the brute force figures in red and the quadtree
figures in green. Note that the quadtree method very quickly
becomes more efficient than the brute force method
with quadtrees winning by a factor of 5 for \f$n=32\f$ balls.

\anchor fig27
\image html qtest2.png "Fig. 27: Number of intersection tests for up to 10 balls in more detail." width=50%

Since the far left of \ref fig26 "Fig. 26" is hard
to read, it is reasonable to ask where the two graphs cross,
that is, for which value of \f$n\f$ does quadtrees become more efficient. \ref fig27 "Fig. 27" shows the results for
up to 10 balls in more detail, from which we can see that
quadtrees become more efficient for 6 balls or more.

\anchor fig28
\image html qtest1.png "Fig. 28: Line fitting for quadtree implementation." width=50%

We made the claim above that for reasonable values of
\f$N\f$, \f$k\f$, and \f$m\f$,
quadtree collision detection and response runs in time \f$O(n)\f$.
\ref fig28 "Fig. 28" shows the result of curve-fitting
our results to a linear function using Microsoft Excel.
It reports that the number of AABB intersection
tests is slightly less than 3 times the number of balls
with certainty \f$R^2 = 0.996\f$,
which is pretty close to linear in \f$n\f$.

\anchor section6
# 6. Problems

For the following problems,
copy the folder <span style="background-color:#D8E4D8;">`3. Collision Math Toy`</span> from your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository
to some place convenient (for example, the Desktop or your `Documents` folder) and work there.

\anchor problem1
## Problem 1

<div style="padding-left: 30px;" markdown="1">
The <span style="background-color:#D8E4D8;">`Collision Math Toy`</span> was designed so that there will almost always
be balls in motion. The following changes will make sure that they always will eventually come to a halt.
First, we give the launched balls some Z-axis friction by
adding the line

```cpp   
d.m_fFriction = 0.001f;
```
to function `CGame::Launch` in `Game.cpp` after the line
that sets `d.m_fElasticity`.
Next, in function `CObjectManager::MakeWorldEdges` in `ObjectManager.cpp`, find the line

```cpp 
arcDesc.m_fElasticity = 700.0f;
```
and change the elasticity from `700.0f` to `0.9f`.
Similarly, in the line

```cpp 
ptDesc.m_fElasticity = 1.0f;
```

change the elasticity from `1.0f` to `0.9f`.
Finally, in function `CObjectManager::MakeShapes`, find the line

```cpp
ptDesc.m_fElasticity = 500.0f;
```

and change the elasticity from `500.0f` to `0.9f`.
Towards the end of the function you will find a line

```cpp
Shapes::CCircleDesc circleDesc(Vector2(0.75f*w, h/2.0f), r, 700.0);
```

in which you must change the last parameter (elasticity) from
`700.0f` to `0.9f` as follows.

```cpp
Shapes::CCircleDesc circleDesc(Vector2(0.75f*w, h/2.0f), r, 0.9f);
```

Compile and run the resulting program, and launch a few balls.
If you have done everthing correctly, the balls
will bounce around for a few seconds and then stop.
Notice that the collision detection and response numbers
shown in the dialog box
(AABB tests per iteration,
AABB tests per second,
full tests per second, and
collisions per second, see \ref section2-4 "Section 2.4") remain high even though nothing can
actually collide when the balls are stopped
(see \ref section2-4 "Section 2.4").
We will address this in the next problem.
</div>

\anchor problem2
## Problem 2

<div style="padding-left: 30px;" markdown="1">
It makes sense that balls that are stopped should
go into a dormant, or <em>sleep</em> mode in which they
do not participate in collision detection and response
unless they collide with a dynamic object, in which case
they should stop sleeping.
To this end, start with your code from
\ref problem1 "Problem 1" and make the following changes.

### Changes to `%CObject`

Add
the following private member variable to `CObject` in `Object.h`.

```cpp
bool m_bSleep = false;  ///< Sleep state.
```
Also in `Object.h`, add the following public writer and reader
functions to `CObject` to enable other entities to access
the sleep flag `m_bSleep`.

```cpp
void SetSleep(const bool); 
const bool GetSleep() const;
```
    
Add the code for these functions to `Object.cpp` as follows.

```cpp
void CObject::SetSleep(const bool b){
  m_bSleep = b;
} //SetSleeping

const bool CObject::GetSleep() const{
  return m_bSleep;
} //GetSleeping
```

### Changes to `%CObjectManager`

You will need to make changes to `CObjectManager::Move`
and `CObjectManager::BroadPhase`.

#### Changes to `%CObjectManager::Move`

In `ObjectManager.cpp`, add the following code to
`CObjectManager::Move` after the quadtree is updated
and before the number of out of bounds balls is counted.

```cpp
for(auto const& p:m_stdShapes[(UINT)Shapes::eMotion::Dynamic]){
  Shapes::CDynamicCircle* pCirc = (Shapes::CDynamicCircle*)p;
  CObject* pObj = (CObject*)(p->GetUserPtr());

  const bool bGoToSleep = pCirc->GetVel().LengthSquared() < 0.0001f;
  if(bGoToSleep)pCirc->SetVel(Vector2(0.0f));

  if(pObj != nullptr){
    if(bGoToSleep)pObj->SetSleep(bGoToSleep);
    pObj->m_eUnlitSprite = bGoToSleep? eSprite::Circle: eSprite::Ball;
  } //if
} //for
```

The for-loop iterates through all dynamic shapes.
The first two lines of its body gets pointers
to the dynamic circle the the corresponding object.
The next two lines sets a local variable
`bGoToSleep` to `true` iff the dynamic circle's velocity
is very small, and if so, reduces the velocity to the zero vector.
The if-statement is defensive programming since `pObj` will
never be `nullptr` unless some far-reaching bug such as a buffer
over-run makes it so. The body of the if-statement (which is
always executed) sets the current objects's sleep flag
if necessary, and changes its sprite from the usual `eSprite::Ball`
to `eSprite::Circle` when sleeping.
For example, in \ref fig29 "Fig. 29" you can see ten balls,
six of which are sleeping (the colored circles) and four of which are not (the green and blue ball-bearings).

\anchor fig29
\image html sleeping.png "Fig. 29: Sleeping and non-sleeping balls." width=60%

Below the for-loop you will find the following
code that counts the number of out of bounds balls.

```cpp
for(auto const& p: m_stdShapes[(UINT)Shapes::eMotion::Dynamic]){ 
  const Shapes::CAabb2D& aabb = p->GetAABB();
  if(!(aabb && m_cAABB))
    ++m_nLostBalls;
} //for
```

There's no need to do this for out of bounds balls that are sleeping,
so replace that code with the following.
  
```cpp
for(auto const& p: m_stdShapes[(UINT)Shapes::eMotion::Dynamic]){ 
  CObject* pObj = (CObject*)(p->GetUserPtr());
  if(!pObj->GetSleep()){
    const Shapes::CAabb2D& aabb = p->GetAABB();
    if(!(aabb && m_cAABB))
      ++m_nLostBalls;
  } //if
} //for
```

#### Changes to `%CObjectManager::BroadPhase`

`CObjectManager::BroadPhase` has two nested `for`-loops,
the first repeating for the number of broad-phase iterations
`m_nCIterations` and the second for each dynamic shape.
After the first line of the body of the nested `for`-loop
declare an object pointer `pObj1` and make it point to the
first object (whose shape is a dynamic circle), then declare a `boolean` variable `bObj1Sleep` and
set it to `true` if that object is asleep:

```cpp
CObject* pObj1 = (CObject*)pCirc->GetUserPtr();
const bool bObj1Sleep = pObj1->GetSleep();
```

##### Static Shapes

The following lines do narrow-phase collision
detection response of the dynamic circle against the gate
and all static shapes.

```cpp
m_pGate->NarrowPhase(pCirc); 

for(auto const& k: v[(UINT)Shapes::eMotion::Static]) 
  NarrowPhase(k, pCirc);
```

The above three lines need only be executed if the object
is not asleep, so enclose them
in an `if`-statement as follows.

```cpp
if(!bObj1Sleep){
  m_pGate->NarrowPhase(pCirc);

  for(auto const& k: v[(UINT)Shapes::eMotion::Static])
    NarrowPhase(k, pCirc);
} //if
```

##### Kinematic Shapes

The following lines do narrow-phase collision
detection response of the dynamic circle against all
kinematic shapes.

```cpp 
for(auto const& k: v[(UINT)Shapes::eMotion::Kinematic]) 
  NarrowPhase(k, pCirc);
```

The above two lines need only be executed if the object
is not asleep or the kinematic shapes are rotating, so enclose them
in an `if`-statement as follows. Also, wake the object if a collision is detected.

```cpp 
if(!bObj1Sleep || m_bRotate)
  for(auto const& k: v[(UINT)Shapes::eMotion::Kinematic]) 
    if(NarrowPhase(k, pCirc))
      pObj1->SetSleep(false); 
```
##### Dynamic Shapes

The following lines do narrow-phase collision
detection response of the dynamic circle against all
(later numbered) dynamic shapes.

```cpp
for(auto k=next(j); k!=dEnd; k++)
  NarrowPhase(*k, pCirc);
```

Replace those two lines with the following:

```cpp
for(auto k=next(j); k!=dEnd; k++){
  CObject* pObj2 = (CObject*)(*k)->GetUserPtr();

  if(!(bObj1Sleep && pObj2->GetSleep()))
    if(NarrowPhase(*k, pCirc)){
      pObj1->SetSleep(false);
      pObj2->SetSleep(false);
    } //if
} //for
```
Check that you have done this correctly by launching
a large number of balls (say 100) and waiting until
they all come to rest. The dialog box will show
that no collision tests are being done, as shown
in \ref fig30 "Fig. 30".

\anchor fig30
\image html sleeping100.png "Fig. 30: One hundred sleeping balls with no collision detection happening." width=50%

</div>

\anchor section7
# 7. What Next?

Next, take a look at the <a href="../pinball/index.html">Pinball Game</a>.

**/



