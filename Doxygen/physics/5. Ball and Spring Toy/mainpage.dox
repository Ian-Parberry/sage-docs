/**
\mainpage notitle

\anchor section1
# 1. Introduction

\anchor fig1
\image html all.gif "Fig. 1: Bodies made up from springs and sticks."

The Ball and Spring Toy applies Verlet integration and Gauss-Seidel 
Relaxation to bodies made up of balls connected by springs
and sticks. The bodies fall under gravity and you can apply
a random impulse to them to see how they react
The types of bodies available are chains
of length 2, 3, and 4; wheels of size 4, 5, and 6;
and a ragdoll robot (see \ref fig1 "Fig. 1"). 
For each body type except the ragdoll
robot you are given two bodies, one with springs and one
with sticks.
The ragdoll robot
has some primitive AI that attempts to make it stand up and move to
the center of the window.

The remainder of this page is divided into five sections.
\ref section2 "Section 2" lists the controls
and their corresponding actions,
\ref section3 "Section 3" tells you how to build it,
\ref section4 "Section 4" gives you a list of actions to take in the game to see some of its
important features,
\ref section5 "Section 5" gives a breakdown of the code,
\ref section6 "Section 6" contains some programming problems,
and
\ref section7 "Section 7" addresses the question "what next?".

\anchor section2
# 2. Controls

<center>
<table>
<tr>
<td><center><b>Key</b></center></td>
<td><center><b>Action</b></center></td>
<tr>
<td><center>F1</center></td>
<td>Help (this document)</td>
<tr>
<td><center>Backspace</center></td>
<td>Restart with the current body type</td>
<tr>
<td><center>Enter</center></td>
<td>Advance to the next body type</td>
<tr>
<td><center>Space</center></td>
<td>Apply a random impulse</td>
<tr>
<td><center>PrtScr (hold down)</center></td>
<td>Save screenshot to a PNG file</td>
<tr>
<td><center>Esc</center></td>
<td>Quit game and close the window</td>
</table>
</center>

\anchor section3
# 3. Building the Game

This code uses <a href="../sage/index.html">SAGE</a>.
Make sure that you have followed the
<a href="../install/index.html">SAGE Installation Instructions</a>.
Navigate to the folder <span style="background-color:#D8E4D8;">`5. Ball and Spring Toy`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository.
Run <span style="background-color:#D8E4D8;">`checkenv.bat`</span>
to verify that you have set the environment
variables correctly.
Open <span style="background-color:#D8E4D8;">`Ball and Spring Toy.sln`</span>
 with Visual Studio and build the Release configuration.
The Release executable file <span style="background-color:#D8E4D8;">`Ball and Spring Toy.exe`</span>
will appear. 
Alternatively, run <span style="background-color:#D8E4D8;">`Build.bat`</span>
to build both Release and Debug configurations. 

\anchor section4
# 4. Game Play

As described in \ref section2 "Section 2", use the keyboard to select various bodies
and watch how they respond to random impulses. Note that the bodies made from
springs will deform when they hit the edges of the window but the bodies made from
wood will not (see \ref fig2 "Fig. 2" for an example). 
If you apply an impulse to the ragdoll robot and let it lie on
the bottom of the window for a second or two as shown in \ref fig3 "Fig. 3",
then it will attempt to self-right and move to the center
of the window by applying impulses to parts of its body.

\anchor fig2
\image html deform.png "Fig. 2: Deformation of bodies with springs." width=50%

\anchor fig3
\image html robot.png "Fig. 3: The robot at rest." width=50%

\anchor section5
# 5. Code Breakdown

The most important parts of this code are
Verlet integration (\ref section5-1 "Section 5.1"),
Jacobi-Gauss-Seidel relaxation (\ref section5-2 "Section 5.2"),
and bodies made up of points, sticks, and springs (\ref section5-3 "Section 5.3").

\anchor section5-1
## 5.1 Verlet Integration

Loup Verlet developed the concept that is now called _Verlet integration_ for use in particle physics simulation.
There are mathematical reasons for using Verlet integration instead of Euler integration when simulating systems of particles.
One useful feature of Verlet integration is that it is easy to incorporate constraints, which
means that Verlet integration makes it easier to code soft-body animation.

Let \f$\vec{s}_i\f$ be the position of a point at the end of frame \f$i\f$,
\f$\vec{v}_i\f$ its velocity, and \f$\vec{a}_i\f$ its acceleration,
and \f$t_i\f$ be the fixed frame duration.
Suppose we know \f$\vec{a}_i\f$, \f$\vec{s}_i\f$, \f$\vec{s}_{i-1}\f$ 
and want to compute \f$\vec{s}_{i+1}\f$. 
Let \f$\delta_i = \vec{s}_i - \vec{s}_{i-1}\f$,
the distance moved in frame \f$i\f$.
The distance to be moved in frame \f$i+1\f$ is
\f[\delta_{i+1} = \vec{v}_i t_i + \vec{a}_i t_i^2/2.\f]
Now, \f$\delta_i\f$ is a good approximation to \f$\vec{v}_i t_i\f$,
and therefore
\f[
\delta_{i+1} = \delta_i + \vec{a}_i t_i^2/2.
\f]
Since \f$\vec{s}_{1+1} = \vec{s}_i + \delta_{i+1}\f$,
substituting for \f$\delta_{i+1}\f$,
\f[
\vec{s}_{i+1} = \vec{s}_i +\delta_i + \vec{a}_i t_i^2/2.
\f]
Substituting for \f$\delta_i\f$, we get
\f[
\vec{s}_{i+1} = \vec{s}_i + (\vec{s}_i - \vec{s}_{i-1}) + \vec{a}_i t_i^2/2,
\f]
that is, 
\anchor equation1
\f[
\vec{s}_{i+1} = 2\vec{s}_i - \vec{s}_{i-1} + \vec{a}_i t_i^2/2.
\tag{1}
\f] 
This shows us how to compute \f$\vec{s}_{i+1}\f$
given \f$\vec{a}_i\f$, \f$\vec{s}_i\f$, and \f$\vec{s}_{i-1}\f$.
Notice that there is no need to store velocity.
We can even fake a kind of friction in the \f$Z\f$ direction
using 
\f[
\vec{s}_{i+1} = 1.99\vec{s}_i - 0.99\vec{s}_{i-1} + \vec{a}_i t_i^2/2.
\f] 

Recall that in the <a href="../shapes/index.html">Shapes Library</a>,
the class <a href="../shapes/class_shapes_1_1_c_dynamic_circle.html">CDynamicCircle</a> has a private member variable
`m_vVec` that stores its velocity vector \f$\vec{v}_i\f$ in frame \f$i+1\f$.
This is used in its <a href="../shapes/class_shapes_1_1_c_dynamic_circle.html#ae637ccb409188baa680df552ff20051b">`move`</a>
function to compute its new position using the equation
\anchor equation2
\f[
\vec{s}_{i+1} = \vec{s}_i + t_i\vec{v}_i.
\tag{2}
\f]
This method is commonly referred to as _Euler integration_.
Contrast this with \ref equation1 "Equation (1)" above for Verlet integration.
\ref fig4 "Fig 4." summarizes the differences between Verlet and
Euler integration.

\anchor fig4
\image html verlet.png "Fig. 4: Verlet integration." width=55%

We can optimize \ref equation1 "Equation (1)"
by assuming that \f$t_i\f$ is a constant
(in fact we can make it equal to \f$1\f$),
ignoring the division by 2 and increasing \f$\vec{a}_i\f$
to compensate, ending up with
\f[
\vec{s}_{i+1} = 2\vec{s}_i - \vec{s}_{i-1} + \vec{a}_i,
\f]
or, if there is no acceleration,
\anchor equation3
\f[
\vec{s}_{i+1} = 2\vec{s}_i - \vec{s}_{i-1}.
\tag{3}
\f]

We implement this in class `CPoint` which has two private
member variables `CPoint::m_vPos` and `CPoint::m_vOldPos`.
`CPoint::move` computes the new value of `CPoint::m_vPos`
as follows:

    const Vector2 vTemp = m_vPos;
    m_vPos += m_vPos - m_vOldPos; 
    m_vOldPos = vTemp;

Notice that the second line of the above code implements
\ref equation3 "Equation (3)".
It uses only four floating point additions, whereas
\ref equation2 "Equation (2)" requires four floating point additions and
two floating point multiplications. 
Acceleration due to gravity is then faked by:

    m_vPos.y -= 0.2f;

\anchor section5-2
## 5.2 Jacobi-Gauss-Seidel Relaxation

We mentioned in the previous section
that Verlet integration makes it easy to enforce constraints on points.
We can model a stick by applying Verlet integration to two points at its ends.
The constraint is that the distance between the points must remain constant.
We can move the stick by
moving each point independently, then trying to correct their positions
to satisfy the distance constraint
(before rendering) if they are the wrong distance apart.

\anchor fig5
\image html stick0.png "Fig. 5: A stick represented by two points."  width=20%

\anchor fig6
\image html stick1.png "Fig. 6: The vector from one point to the other."  width=20%

Suppose we have a stick of length \f$d\f$ whose end points are
at positions \f$\vec{p}_0\f$
and \f$\vec{p}_1\f$ after they have been moved independently
as shown in \ref fig5 "Fig. 5".
Let \f$\vec{v} = \vec{p}_0 - \vec{p}_1\f$ be the vector from \f$\vec{p}_1\f$
to \f$\vec{p}_0\f$ as shown in \ref fig6 "Fig. 6" and
let us suppose that \f$\Vert \vec{v} \Vert \not= d\f$.
We will displace the end points along the stick by an equal
amount so that the distance between them is \f$d\f$.

\anchor fig7
\image html stick2.png "Fig. 7: Correcting the length of the stick."  width=20%

Define
\anchor equation4
\f[
c = 1 - d/\Vert\vec{v}\Vert
\tag{4}
\f].
Let the new end points of the stick be
\f$\vec{s}_0 = \vec{p}_0 - c\vec{v}/2\f$ and
\f$\vec{s}_1 = \vec{p}_1 + c\vec{v}/2\f$ as shown in \ref fig6 "Fig. 6".
The length of this stick is then
\f$\Vert\vec{s}_0 - \vec{s}_1\Vert = \Vert\vec{v}\Vert -(1-d/\Vert\vec{v}\Vert)\Vert\vec{v}\Vert = d\f$.
This process is called _relaxation_.

\anchor fig8
\image html 2stick0.png "Fig. 8: Two joined sticks with three points."  width=45%

Now suppose that we have two sticks with one end point in common
such that they can freely rotate about this point.
Suppose one stick has end points \f$p_0\f$ and \f$p_1\f$,
and the other stick has end points \f$p_1\f$ and \f$p_2\f$
as shown in \ref fig8 "Fig. 8", left.
Further suppose that both sticks have the wrong length and
need to be corrected
as shown in \ref fig8 "Fig. 8", right.
We could try relaxing one stick and then the other,
but the result will be wrong as shown in \ref fig9 "Fig. 9".
The shared point \f$\vec{p}_1\f$ will be first moved to the green
point in \ref fig9 "Fig. 9", left,
then to the purple point in \ref fig9 "Fig. 9", right.
As we see in  in \ref fig9 "Fig. 9" right, the purple point
is not on the stick with end points \f$p_1\f$ and \f$p_2\f$.

\anchor fig9
\image html 2stick1.png "Fig. 9: Sequential relaxation gives the wrong result."  width=45%

However, if we repeatedly relax first one stick then the other,
the end points will eventually get very close to where they need to be.
This was independently discovered by the mathematicians
<a href="https://en.wikipedia.org/wiki/Carl_Gustav_Jacob_Jacobi">Jacobi</a>,
<a href="https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss">Gauss</a>,
and <a href="https://en.wikipedia.org/wiki/Philipp_Ludwig_von_Seidel">Seidel</a>, 
thus the name _Jacobi-Gauss-Seidel_ relaxation_.
Rather than checking for closeness (which would be
computationally very expensive), we will just do a small
fixed number of iterations and hope for the best.

Furthermore, we can implement springs as well as sticks by
replacing \ref equation4 "Equation (4)" with
\anchor equation5
\f[
c = r(1 - d/\Vert\vec{v}\Vert)
\tag{5}
\f]
where \f$0 < r \leq 1\f$ is called the _restitution_,
which is a measure of the stiffness of the spring,
where a stick has restitution 1.

In our code each point will be implemented as an instance of `CPoint`.
`CPoint::move` moves the point using
Verlet integration (see \ref section5-1 "Section 5.1")
Each spring will be implemented as an instance of
`CSpring`.
`CSpring::Relax` performs one iteration of _Jacobi-Gauss-Seidel_ relaxation
using \ref equation5 "Equation (5)".
Sticks will be instances of `CSpring`
with private member variable `CSpring::m_fRestitution` = 1.

\anchor section5-3
## 5.3 Bodies

A _body_ is a collection of points and
springs connecting those points. It will
be represented as an instance of `CBody`, which has
member variables made up of pointers to instances
of `CSpring` and `CPoint`. There are three kinds of body,
each of which is derived from `CBody`.
`CChain` is a chain of connected points, as in
\ref fig10 "Fig. 10". Note that there are two instances of
`CBody` drawn there, one made up of sticks and the other springs.
Successive levels show chains of 2, 3, and 4 points.
`CChain` consists of just a constructor that puts the points
in the right position and connects them with sticks or springs as required.

\anchor fig10
\image html chain.png "Fig. 10: Three-point chains made of sticks (left) and springs (right)."  width=50%

`CWheel` is a circle of points connected to a central point which
acts as a hub. Successive levels show wheels that are square,
pentagonal, and hexagonal. \ref fig11 "Fig. 11" shows a pentagonal wheel.
`CWheel` consists of just a constructor that puts the points
in the right position and connects them with sticks or springs as required.

\anchor fig11
\image html wheel.png "Fig. 11: Pentagonal wheel made of sticks (left) and springs (right)."  width=40%

Finally, Woody the ragdoll robot (see \ref fig12 "Fig. 12")
is an instance of `CRagdoll`
made up of both sticks and springs.
In addition to the constructor, `CRagdoll` has various functions
that implement the rule-based AI that makes it jump back onto its
feet after it has fallen (see \ref fig3 "Fig. 3"). 

\anchor fig12
\image html robot0.png "Fig. 12: Woody the ragdoll robot."  width=15%


\anchor section6
# 6. Problems

For the following problems you can either work directly in the
folder <span style="background-color:#D8E4D8;">`5. Ball and Spring Toy`</span> in your
copy of the <span style="background-color:#D8E4D8;">`sage-physics`</span> repository,
or (recommended) make a copy of the folder <span style="background-color:#D8E4D8;">`5. Ball and Spring Toy`</span>
in some place convenient (for example, the Desktop or your `Documents` folder)
and work there.

\anchor problem6-1
## Problem 6.1

Modify the code so that it works as follows. Hitting the down arrow (`VK_DOWN`) must scale the objects
by 4/5 each time it is hit, down to a minimum of 16/25.
Hitting the up arrow (VK_UP) scale the objects by
5/4 each time it is hit, up to a maximum of 1. The object must relaunch each time you scale up or
down. For example, \ref fig13 "Fig. 13" shows the first body in their scaled
initial positions at small (scale factor \f$0.75^2\f$), medium (scale factor \f$0.75\f$), 
and large (scale factor \f$1\f$) scale.

\anchor fig13
\image html scale.gif "Fig. 13: Scaled object in the initial position for small, medium, and large."

Hint: Begin by adding a new static member variable `m_fScale` to `CCommon`, initialized to `1.0f`.
Add the following code to `CGame::KeyboardHandler`:

    const float fScaleFactor = 0.8f;
    const float fScaleFactorSq = sqr(fScaleFactor);
    
    if(m_pKeyboard->TriggerDown(VK_UP) && m_fScale < 1.0f){ 
        m_fScale = min(1.0f, m_fScale/fScaleFactor);
        BeginGame();
    } //if
    
    if(m_pKeyboard->TriggerDown(VK_DOWN) && m_fScale > fScaleFactorSq){
        m_fScale = max(fScaleFactorSq, m_fScale*fScaleFactor);
        BeginGame(); 
    } //if

The main things that must scale by `CCommon::m_fScale` are the initial position (as
shown in \ref fig13 "Fig. 13"), gravity, 
collision detection and response, sprite scale (as
shown in \ref fig13 "Fig. 13"),
impulse magnitude, and ragdoll AI.

\anchor section7
# 7. What Next?

Next, take a look at the <a href="../box2drender/index.html">Box2D Render Library</a>.


**/


